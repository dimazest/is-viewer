{"version":3,"sources":["tweet-embed.js","App.js","actions.js","serviceWorker.js","index.js"],"names":["callbacks","TweetEmbed","_this","this","renderTweet","window","twttr","ready","then","_ref","widgets","id","props","_div","innerHTML","concat","user_name","screen_name","lang","text","created_at","load","protocol","location","indexOf","src","cb","length","push","s","document","createElement","setAttribute","onload","forEach","body","appendChild","addScript","_this2","react_default","a","className","ref","c","React","Component","defaultProps","options","Navigation","annotations","onChangeAnnotation","type","data-toggle","data-target","aria-controls","aria-expanded","aria-label","onChange","e","target","value","Object","entries","map","_ref2","_ref3","slicedToArray","key","title","connect","state","data","dispatch","annotationID","actions","CategoryGroup","_ref4","categories","style","minWidth","Categories","App_CategoryGroup","App","App_Navigation","role","maxWidth","tweet_embed","App_Categories","Boolean","hostname","match","initialState","_state","store","createStore","action","applyMiddleware","logger","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.59208b57.chunk.js","sourcesContent":["/* https://github.com/capaj/react-tweet-embed/blob/master/tweet-embed.js */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst callbacks = []\n\nfunction addScript (src, cb) {\n    if (callbacks.length === 0) {\n        callbacks.push(cb)\n        var s = document.createElement('script')\n        s.setAttribute('src', src)\n        s.onload = () => callbacks.forEach((cb) => cb())\n        document.body.appendChild(s)\n    } else {\n        callbacks.push(cb)\n    }\n}\n\n\nclass TweetEmbed extends React.Component {\n    componentDidMount () {\n        const renderTweet = () => {\n            window.twttr.ready().then(({ widgets }) => {\n                // const { options, onTweetLoadSuccess, onTweetLoadError, id } = this.props\n                const { id } = this.props\n\n                this._div.innerHTML = `\n                    <blockquote class=\"twitter-tweet card-blockquote\" data-dnt=\"true\">\n                        <div class=\"card custom-tweet\">\n                            <div class=\"card-block\">\n                                <header>\n                                    <p class=\"twitter-user-name\">${ this.props.user_name }</p>\n                                        <small class=\"text-muted\">@${ this.props.screen_name }</small>\n                                </header>\n                                            <blockquote class=\"card-blockquote\">\n                                                <p dir=\"ltr\" lang=\"${ this.props.lang }\" class=\"card-text\">\n                                                    ${this.props.text}\n                                                </p>\n                                                    <small>\n                                                        <a href=\"https://twitter.com/${this.props.screen_name}/status/${id}\">${this.props.created_at}</a>\n                                                    </small>\n                                            </blockquote>\n                            </div>\n                        </div>\n                    </blockquote>\n                `\n\n                widgets.load(this._div)\n\n                /* widgets*/\n                /* .createTweet(this.props.id, this._div, options)*/\n                /* .then(onTweetLoadSuccess)*/\n                /* .catch(onTweetLoadError)*/\n\n            })\n        }\n\n        if (!window.twttr) {\n            const isLocal = window.location.protocol.indexOf('file') >= 0\n            const protocol = isLocal ? this.props.protocol : ''\n\n            addScript(`${protocol}//platform.twitter.com/widgets.js`, renderTweet)\n        } else {\n            renderTweet()\n        }\n    }\n\n    render () {\n        return <div className={this.props.className} ref={(c) => {\n                this._div = c\n        }} />\n    }\n}\n\nTweetEmbed.propTypes = {\n    id: PropTypes.string,\n    options: PropTypes.object,\n    protocol: PropTypes.string,\n    onTweetLoadSuccess: PropTypes.func,\n    onTweetLoadError: PropTypes.func,\n    className: PropTypes.string,\n    user_name: PropTypes.string,\n    screen_name: PropTypes.string,\n    lang: PropTypes.string,\n    text: PropTypes.string,\n    created_at: PropTypes.string\n}\n\nTweetEmbed.defaultProps = {\n    protocol: 'https:',\n    options: {},\n    className: null\n}\n\nexport default TweetEmbed\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'open-iconic/font/css/open-iconic-bootstrap.css';\nimport './App.css';\n\nimport { connect } from 'react-redux'\n\nimport TweetEmbed from './tweet-embed'\n\nimport * as actions from './actions'\n\nlet Navigation = ({annotations, onChangeAnnotation}) => (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\n        <span className=\"navbar-brand h1 mb-0\">Incident Streams</span>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n\n            <form className=\"form-inline\">\n                <div className=\"input-group input-group-sm\">\n                    <div className=\"input-group-prepend\">\n                        <span className=\"input-group-text\">Annotation</span>\n                    </div>\n                    <select className=\"custom-select custom-select-sm\"\n                        onChange={e => onChangeAnnotation(e.target.value)} >\n                        {Object.entries(annotations).map(([key, {title}]) => (\n                            <option value={key} key={key}>{title}</option>))}\n                    </select>\n                </div>\n            </form>\n        </div>\n    </nav>\n)\nNavigation = connect(\n    state => ({annotations: state.data.annotations}),\n    dispatch => ({onChangeAnnotation: annotationID => dispatch(actions.annotationSelected(annotationID))})\n)(Navigation)\n\nconst CategoryGroup = ({title, categories}) => (\n    <div className=\"card mb-4\" style={{minWidth: \"200px\"}}>\n        <div className=\"card-header\">\n            <h5>{title}</h5>\n        </div>\n        <ul className=\"list-group list-group-flush\">\n            {categories.map((c) =><li className=\"list-group-item\" key={c}>{c}</li>)}\n        </ul>\n    </div>\n)\n\nconst Categories = () => (\n    <div className=\"container-fluid\">\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup title=\"Request\" categories={[\"Goods and Services\", \"Search and Rescue\", \"Information Wanted\"]}/>\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup title=\"Call to Action\" categories={[\"Volunteer\", \"Donations\", \"Move People\"]}/>\n            </div>\n\n        </div>\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup title=\"Report\" categories={[\n                        \"First Party Observation\", \"Third Party Observation\", \"Weather\",\n                        \"Emerging Threats\", \"Significant Event Change\", \"Multimedia Share\",\n                        \"Service Available\", \"Factoid\", \"Official\", \"Clenaup\", \"Hashtags\"]}/>\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup title=\"Other\" categories={[\n                        \"Past News\", \"Continuing News\", \"Advice\", \"Sentiment\", \"Discussion\",\n                        \"Irrelevant\", \"Unknown\", \"Known already\"]}/>\n            </div>\n        </div>\n    </div>\n)\n\nlet App = () => (\n    <div>\n        <Navigation />\n\n        <main className=\"container-fluid\" role=\"main\">\n            <div className=\"row mx-1\">\n                <div className=\"col jumbotron mx-auto\" style={{minWidth: \"300px\", maxWidth: \"500px\"}}>\n                    <TweetEmbed id=\"1050095243318714368\" />\n                </div>\n                <div className=\"col jumbotron ml-2\">\n                <Categories />\n                </div>\n            </div>\n        </main>\n\n        <footer className=\"footer\">\n            <div className=\"container\">\n                <span className=\"text-muted\">Navigatoin trough the stream.</span>\n            </div>\n        </footer>\n    </div>\n)\n\nexport default App;\n","export const ANNOTATION_SELECTED = 'ANNOTATION_SELECTED'\nexport const annotationSelected = (annotationID) => {\n    return {\n        type: ANNOTATION_SELECTED,\n        annotationID\n    }\n}\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport logger from 'redux-logger';\n\nconst rootReducer = (state, action) => {\n    return state\n}\n\nconst initialState = window._state\nwindow.store = createStore(rootReducer, initialState, applyMiddleware(logger))\n\nReactDOM.render(\n    <Provider store={window.store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}