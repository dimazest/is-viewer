{"version":3,"sources":["serviceWorker.js","tweet-embed.js","actions.js","App.js","reducers.js","observers.js","index.js"],"names":["Boolean","window","location","hostname","match","callbacks","TweetEmbed","_this","this","renderTweet","twttr","ready","then","_ref","widgets","id","props","_div","innerHTML","concat","user_name","screen_name","lang","text","created_at","load","protocol","indexOf","src","cb","length","push","s","document","createElement","setAttribute","onload","forEach","body","appendChild","addScript","_this2","react_default","a","className","ref","c","React","Component","defaultProps","options","fetchAnnotation","annotationID","dispatch","getState","state","annotation","objectPath","get","data","fetch","url","r","json","j","payload","type","annotationReceived","eventSelected","eventID","Select","title","onChange","value","values","e","target","map","_ref2","_ref3","Object","slicedToArray","key","Navigation","_ref4","annotations","onChangeAnnotation","onChangeEvent","eventsAnnotated","i","identifier","name","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App_Select","entries","_ref5","_ref6","connect","ui","actions","CategoryGroup","_ref7","categories","style","minWidth","Categories","App_CategoryGroup","App","App_Navigation","role","maxWidth","tweet_embed","App_Categories","arguments","undefined","action","objectSpread","eventIDbyAnnotationID","defineProperty","observers","observer","current","previous","defaultEventID","events","eventid","rootReducer","combineReducers","reducers","initialState","_state","store","createStore","applyMiddleware","thunk","logger","observe","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.924e0c4f.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* https://github.com/capaj/react-tweet-embed/blob/master/tweet-embed.js */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst callbacks = []\n\nfunction addScript (src, cb) {\n    if (callbacks.length === 0) {\n        callbacks.push(cb)\n        var s = document.createElement('script')\n        s.setAttribute('src', src)\n        s.onload = () => callbacks.forEach((cb) => cb())\n        document.body.appendChild(s)\n    } else {\n        callbacks.push(cb)\n    }\n}\n\n\nclass TweetEmbed extends React.Component {\n    componentDidMount () {\n        const renderTweet = () => {\n            window.twttr.ready().then(({ widgets }) => {\n                // const { options, onTweetLoadSuccess, onTweetLoadError, id } = this.props\n                const { id } = this.props\n\n                this._div.innerHTML = `\n                    <blockquote class=\"twitter-tweet card-blockquote\" data-dnt=\"true\">\n                        <div class=\"card custom-tweet\">\n                            <div class=\"card-block\">\n                                <header>\n                                    <p class=\"twitter-user-name\">${ this.props.user_name }</p>\n                                        <small class=\"text-muted\">@${ this.props.screen_name }</small>\n                                </header>\n                                            <blockquote class=\"card-blockquote\">\n                                                <p dir=\"ltr\" lang=\"${ this.props.lang }\" class=\"card-text\">\n                                                    ${this.props.text}\n                                                </p>\n                                                    <small>\n                                                        <a href=\"https://twitter.com/${this.props.screen_name}/status/${id}\">${this.props.created_at}</a>\n                                                    </small>\n                                            </blockquote>\n                            </div>\n                        </div>\n                    </blockquote>\n                `\n\n                widgets.load(this._div)\n\n                /* widgets*/\n                /* .createTweet(this.props.id, this._div, options)*/\n                /* .then(onTweetLoadSuccess)*/\n                /* .catch(onTweetLoadError)*/\n\n            })\n        }\n\n        if (!window.twttr) {\n            const isLocal = window.location.protocol.indexOf('file') >= 0\n            const protocol = isLocal ? this.props.protocol : ''\n\n            addScript(`${protocol}//platform.twitter.com/widgets.js`, renderTweet)\n        } else {\n            renderTweet()\n        }\n    }\n\n    render () {\n        return <div className={this.props.className} ref={(c) => {\n                this._div = c\n        }} />\n    }\n}\n\nTweetEmbed.propTypes = {\n    id: PropTypes.string,\n    options: PropTypes.object,\n    protocol: PropTypes.string,\n    onTweetLoadSuccess: PropTypes.func,\n    onTweetLoadError: PropTypes.func,\n    className: PropTypes.string,\n    user_name: PropTypes.string,\n    screen_name: PropTypes.string,\n    lang: PropTypes.string,\n    text: PropTypes.string,\n    created_at: PropTypes.string\n}\n\nTweetEmbed.defaultProps = {\n    protocol: 'https:',\n    options: {},\n    className: null\n}\n\nexport default TweetEmbed\n","import objectPath from 'object-path'\n\n\nexport const ANNOTATION_SELECTED = 'ANNOTATION_SELECTED'\nexport const annotationSelected = (annotationID) => ({\n        type: ANNOTATION_SELECTED,\n        annotationID,\n})\n\nexport const ANNOTATION_RECEIVED = 'ANNOTATION_RECEIVED'\nexport const annotationReceived = (annotationID, payload) => ({\n    type: ANNOTATION_RECEIVED,\n    annotationID,\n    payload,\n})\n\nexport const ANNOTATION_FETCH_REQUESTED = 'ANNOTATION_FETCH_REQUESTED'\nexport const fetchAnnotation = annotationID => (\n    (dispatch, getState) => {\n        const state = getState()\n        const annotation  = objectPath.get(state, ['data', 'annotations', annotationID])\n        if (!annotation.data) {\n            return fetch(annotation.url)\n            .then(r => r.json())\n            .then(j => dispatch(annotationReceived(annotationID, j)))\n    }}\n)\n\nexport const EVENT_SELECTED = 'EVENT_SELECTED'\nexport const eventSelected = (annotationID, eventID) => ({\n    type: EVENT_SELECTED,\n    annotationID, eventID,\n})\n\nexport const RESET_UI_EVENT_SELECTION = 'RESET_UI_EVENT_SELECTION'\nexport const resetUIEventSelection = () => ({type: RESET_UI_EVENT_SELECTION})\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'open-iconic/font/css/open-iconic-bootstrap.css';\nimport './App.css';\n\nimport { connect } from 'react-redux'\nimport objectPath from 'object-path'\n\nimport TweetEmbed from './tweet-embed'\n\nimport * as actions from './actions'\n\nconst Select = ({title, onChange, value, values}) => (\n    <div className=\"input-group input-group-sm mr-2\">\n        <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">{title}</span>\n        </div>\n        <select className=\"custom-select custom-select-sm\"\n            onChange={e => onChange(e.target.value)} value={value}>\n            {values.map(([key, value]) => (<option value={key} key={key}>{value}</option>))}\n        </select>\n    </div>\n)\n\nlet Navigation = ({annotations, onChangeAnnotation, annotationID, eventID, onChangeEvent}) => {\n    const eventsAnnotated = objectPath.get(annotations, [annotationID, 'data', 'annotator', 'eventsAnnotated'], []).map(i => [i.identifier, i.name])\n\n    return <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\n        <span className=\"navbar-brand h1 mb-0\">Incident Streams</span>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <form className=\"form-inline\">\n                <Select title=\"Annotation\" onChange={annotationID => onChangeAnnotation(annotationID)} value={annotationID} values={Object.entries(annotations).map(([key, {title}]) => [key, title])} />\n                {eventID && <Select title=\"Event\" onChange={eventID => onChangeEvent(annotationID, eventID)} value={eventID} values={eventsAnnotated} />}\n            </form>\n        </div>\n    </nav>\n}\nNavigation = connect(\n    state => ({\n        annotations: state.data.annotations,\n        annotationID: state.ui.annotationID,\n        eventID: state.ui.eventID,\n    }),\n    dispatch => ({\n        onChangeAnnotation: (annotationID) => dispatch(actions.annotationSelected(annotationID)),\n        onChangeEvent: (annotationID, eventID) => dispatch(actions.eventSelected(annotationID, eventID)),\n    })\n)(Navigation)\n\nconst CategoryGroup = ({title, categories}) => (\n    <div className=\"card mb-4\" style={{minWidth: \"200px\"}}>\n        <div className=\"card-header\">\n            <h5>{title}</h5>\n        </div>\n        <ul className=\"list-group list-group-flush\">\n            {categories.map((c) =><li className=\"list-group-item\" key={c}>{c}</li>)}\n        </ul>\n    </div>\n)\n\nconst Categories = () => (\n    <div className=\"container-fluid\">\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup title=\"Request\" categories={[\"Goods and Services\", \"Search and Rescue\", \"Information Wanted\"]}/>\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup title=\"Call to Action\" categories={[\"Volunteer\", \"Donations\", \"Move People\"]}/>\n            </div>\n\n        </div>\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup title=\"Report\" categories={[\n                        \"First Party Observation\", \"Third Party Observation\", \"Weather\",\n                        \"Emerging Threats\", \"Significant Event Change\", \"Multimedia Share\",\n                        \"Service Available\", \"Factoid\", \"Official\", \"Clenaup\", \"Hashtags\"]}/>\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup title=\"Other\" categories={[\n                        \"Past News\", \"Continuing News\", \"Advice\", \"Sentiment\", \"Discussion\",\n                        \"Irrelevant\", \"Unknown\", \"Known already\"]}/>\n            </div>\n        </div>\n    </div>\n)\n\nlet App = () => (\n    <div>\n        <Navigation />\n\n        <main className=\"container-fluid\" role=\"main\">\n            <div className=\"row mx-1\">\n                <div className=\"col jumbotron mx-auto\" style={{minWidth: \"300px\", maxWidth: \"500px\"}}>\n                    <TweetEmbed id=\"1050095243318714368\" />\n                </div>\n                <div className=\"col jumbotron ml-2\">\n                <Categories />\n                </div>\n            </div>\n        </main>\n\n        <footer className=\"footer\">\n            <div className=\"container\">\n                <span className=\"text-muted\">Navigatoin trough the stream.</span>\n            </div>\n        </footer>\n    </div>\n)\n\nexport default App;\n","import * as actions from './actions'\n\nexport const ui = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_SELECTED: {\n        return {\n            ...state,\n            annotationID: action.annotationID,\n            eventID: undefined,\n        }}\n    case actions.EVENT_SELECTED: {\n        return {\n            ...state,\n            eventID: action.eventID,\n            eventIDbyAnnotationID: {\n                ...state.eventIDbyAnnotationID,\n                [action.annotationID]: action.eventID,\n            }\n        }\n    }\n    case actions.RESET_UI_EVENT_SELECTION: {\n        return {\n            ...state,\n            eventID: undefined,\n        }\n    }\n    default: {\n        return state\n    }}\n}\n\nexport const data = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_RECEIVED: {\n        return {\n            ...state,\n            annotations: {\n                ...state.annotations,\n                [action.annotationID]: {\n                    ...(state.annotations[action.annotationID] || {}),\n                    data: action.payload,\n                }\n            }\n        }}\n    default: {\n        return state\n    }}\n}\n","import { observer } from 'redux-observers'\n\nimport * as actions from './actions'\n\nconst annotationObserver = observer(\n  state => state.ui.annotationID,\n  (dispatch, current, previous) => {\n      dispatch(actions.fetchAnnotation(current))\n  }\n)\n\nconst eventAnnotationObserver = observer(\n    state => ({\n        annotationID: state.ui.annotationID,\n        eventID: state.ui.eventID,\n        annotation: state.data.annotations[state.ui.annotationID],\n        defaultEventID: state.ui.eventIDbyAnnotationID[state.ui.annotationID],\n    }),\n    (dispatch, {annotationID, eventID, annotation, defaultEventID}, previous) => {\n        if (!annotation.data) {\n            dispatch(actions.resetUIEventSelection())\n        }\n        if (annotation.data && !eventID) {\n            dispatch(actions.eventSelected(annotationID, defaultEventID || annotation.data.events[0].eventid))\n        }\n    }\n)\n\n\nexport default [annotationObserver, eventAnnotationObserver]\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport logger from 'redux-logger';\nimport { observe } from 'redux-observers'\nimport thunk from 'redux-thunk'\n\nimport App from './App'\nimport * as reducers from './reducers'\nimport observers from './observers'\nimport * as actions from './actions'\n\nconst rootReducer = combineReducers(reducers)\n\nconst initialState = window._state\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk, logger))\nwindow.store = store\n\nobserve(store, observers)\n\nstore.dispatch(actions.fetchAnnotation(initialState.ui.annotationID))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}