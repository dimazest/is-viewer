{"version":3,"sources":["serviceWorker.js","tweet-embed.js","actions.js","selectors.js","App.js","reducers.js","observers.js","index.js"],"names":["Boolean","window","location","hostname","match","callbacks","TweetEmbed","_this","this","renderTweet","twttr","ready","then","_ref","widgets","_this$props","props","id","options","createTweet","_div","protocol","indexOf","src","cb","length","push","s","document","createElement","setAttribute","onload","forEach","body","appendChild","addScript","concat","_this2","react_default","a","className","ref","c","React","Component","defaultProps","fetchAnnotation","annotationID","dispatch","getState","state","annotation","objectPath","get","payload","fetch","url","r","json","j","type","annotationReceived","Object","objectSpread","events","Map","map","v","eventid","tweets","t","categories","Set","annotator","eventsAnnotated","identifier","eventSelected","eventID","getEventsMetadata","annotations","ui","getAnnotationID","_ref2","getEventID","_ref3","byAnnotation","getEventsAnnotatedIdentifierNameItems","createSelector","toConsumableArray","_ref5","_ref6","slicedToArray","name","getAnnotationsIDTitleItems","entries","_ref7","_ref8","title","getTweets","_ref4","getTweetIndex","tweetIndex","hasPrevious","hasNext","total","getTweet","Select","onChange","value","values","e","target","key","TweetNavigation","advanceTweet","onClick","by","role","connect","selectors","arguments","undefined","actions","TweetSlider","min","max","parseInt","index","Navigation","eventsAnnotatedIdentifierNameItems","annotationsIDTitleItems","onChangeAnnotation","onChangeEvent","data-toggle","data-target","App_Select","App_TweetSlider","App_TweetNavigation","CategoryGroup","categoryGroup","tweet","style","minWidth","i","has","Categories","categoryGroups","App_CategoryGroup","request","callToAction","report","other","EventDescription","_ref9","eventInfo","dangerouslySetInnerHTML","__html","TweetBox","_ref10","postID","tweet_embed","App","App_Navigation","maxWidth","App_TweetBox","App_EventDescription","App_Categories","action","defineProperty","byEvent","observers","observer","current","previous","rootReducer","combineReducers","reducers","initialState","_state","store","createStore","applyMiddleware","thunk","logger","observe","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.196a4890.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* https://github.com/capaj/react-tweet-embed/blob/master/tweet-embed.js */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst callbacks = []\n\nfunction addScript (src, cb) {\n    if (callbacks.length === 0) {\n        callbacks.push(cb)\n        var s = document.createElement('script')\n        s.setAttribute('src', src)\n        s.onload = () => callbacks.forEach((cb) => cb())\n        document.body.appendChild(s)\n    } else {\n        callbacks.push(cb)\n    }\n}\n\n\nclass TweetEmbed extends React.Component {\n    componentDidMount () {\n        const renderTweet = () => {\n            window.twttr.ready().then(({ widgets }) => {\n                const { id, options } = this.props\n\n                // this._div.innerHTML = `\n                //     <blockquote class=\"twitter-tweet card-blockquote\" data-dnt=\"true\">\n                //         <div class=\"card custom-tweet\">\n                //             <div class=\"card-block\">\n                //                 <header>\n                //                     <p class=\"twitter-user-name\">${ this.props.user_name }</p>\n                //                         <small class=\"text-muted\">@${ this.props.screen_name }</small>\n                //                 </header>\n                //                             <blockquote class=\"card-blockquote\">\n                //                                 <p dir=\"ltr\" lang=\"${ this.props.lang }\" class=\"card-text\">\n                //                                     ${this.props.text}\n                //                                 </p>\n                //                                     <small>\n                //                                         <a href=\"https://twitter.com/${this.props.screen_name}/status/${id}\">${this.props.created_at}</a>\n                //                                     </small>\n                //                             </blockquote>\n                //             </div>\n                //         </div>\n                //     </blockquote>\n                // `\n                //\n                // widgets.load(this._div)\n\n                widgets.createTweet(id, this._div, options)\n                // .then(onTweetLoadSuccess)\n                // .catch(onTweetLoadError)\n\n            })\n        }\n\n        if (!window.twttr) {\n            const isLocal = window.location.protocol.indexOf('file') >= 0\n            const protocol = isLocal ? this.props.protocol : ''\n\n            addScript(`${protocol}//platform.twitter.com/widgets.js`, renderTweet)\n        } else {\n            renderTweet()\n        }\n    }\n\n    render () {\n        return <div className={this.props.className} ref={(c) => {\n                this._div = c\n        }} />\n    }\n}\n\nTweetEmbed.propTypes = {\n    id: PropTypes.string,\n    options: PropTypes.object,\n    protocol: PropTypes.string,\n    onTweetLoadSuccess: PropTypes.func,\n    onTweetLoadError: PropTypes.func,\n    className: PropTypes.string,\n    user_name: PropTypes.string,\n    screen_name: PropTypes.string,\n    lang: PropTypes.string,\n    text: PropTypes.string,\n    created_at: PropTypes.string\n}\n\nTweetEmbed.defaultProps = {\n    protocol: 'https:',\n    options: {},\n    className: null\n}\n\nexport default TweetEmbed\n","import objectPath from 'object-path'\n\n\nexport const ANNOTATION_SELECTED = 'ANNOTATION_SELECTED'\nexport const annotationSelected = (annotationID) => ({\n        type: ANNOTATION_SELECTED,\n        annotationID,\n})\n\nexport const ANNOTATION_RECEIVED = 'ANNOTATION_RECEIVED'\nexport const annotationReceived = (annotationID, payload) => ({\n    type: ANNOTATION_RECEIVED,\n    annotationID,\n    payload,\n})\n\nexport const ANNOTATION_FETCH_REQUESTED = 'ANNOTATION_FETCH_REQUESTED'\nexport const fetchAnnotation = annotationID => (\n    (dispatch, getState) => {\n        const state = getState()\n        const annotation  = objectPath.get(state, ['annotations', annotationID])\n        if (!annotation.payload) {\n            return fetch(annotation.url)\n            .then(r => r.json())\n            .then(j => dispatch(annotationReceived(\n                annotationID,\n                {\n                    ...j,\n                    events: new Map(j.events.map(v => [\n                        v.eventid,\n                        {\n                            ...v,\n                            tweets: v.tweets.map(t => ({...t, categories: new Set(t.categories)}))\n                        }\n                    ])),\n                    annotator: {\n                        ...j.annotator,\n                        eventsAnnotated: new Map(j.annotator.eventsAnnotated.map(v => [v.identifier, v])),\n                    },\n                }\n            )))\n    }}\n)\n\nexport const EVENT_SELECTED = 'EVENT_SELECTED'\nexport const eventSelected = (annotationID, eventID) => ({\n    type: EVENT_SELECTED,\n    annotationID, eventID,\n})\n\nexport const ADVANCE_TWEET = 'ADVANCE_TWEET'\nexport const advanceTweet = (annotationID, eventID, by=1) => ({\n    type: ADVANCE_TWEET,\n    annotationID, eventID, by,\n})\n\nexport const SET_TWEET = 'SET_TWEET'\nexport const setTweet = (annotationID, eventID, index) => ({\n    type: SET_TWEET,\n    annotationID, eventID, index,\n})\n","import { createSelector } from 'reselect'\nimport objectPath from 'object-path'\n\nexport const getEventsMetadata = ({annotations, ui}) => objectPath.get(annotations, [ui.annotationID, 'payload', 'annotator', 'eventsAnnotated'], new Map())\nexport const getAnnotationID = ({ui}) => ui.annotationID\nexport const getEventID = ({ui}) => ui.byAnnotation[ui.annotationID].eventID\nexport const getAnnotations = state => state.annotations\nexport const getEvents = ({annotations, ui}) => objectPath.get(annotations, [ui.annotationID, 'payload', 'events'], new Map())\n\nexport const getEventInfo = state => {\n    const events = getEventsMetadata(state)\n    const eventID = getEventID(state)\n\n    return events.get(eventID)\n}\n\nexport const getEventsAnnotatedIdentifierNameItems = createSelector(\n    [getEventsMetadata],\n    eventsAnnotated => [...eventsAnnotated].map(([k, v]) => [v.identifier, v.name])\n)\n\nexport const getAnnotationsIDTitleItems = createSelector(\n    [getAnnotations],\n    annotations => Object.entries(annotations).map(([key, {title}]) => [key, title])\n)\n\nexport const getTweets = createSelector(\n    [getEvents, getEventID],\n    (events, eventID) => (events.get(eventID) || {}).tweets || [{}]\n)\n\nexport const getTweetIndex = state => {\n    const annotationID = getAnnotationID(state)\n    const eventID = getEventID(state)\n    const tweets = getTweets(state)\n    const tweetIndex = objectPath.get(state, ['ui', 'byAnnotation', annotationID, 'byEvent', eventID], {}).tweetIndex || 0\n    return {\n        hasPrevious: tweetIndex > 0,\n        hasNext: tweetIndex < tweets.length - 1,\n        total: tweets.length,\n        tweetIndex,\n    }\n}\n\nexport const getTweet = (state) => getTweets(state)[getTweetIndex(state).tweetIndex] || {}\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'open-iconic/font/css/open-iconic-bootstrap.css';\nimport './App.css';\n\nimport { connect } from 'react-redux'\nimport objectPath from 'object-path'\n\nimport TweetEmbed from './tweet-embed'\n\nimport * as actions from './actions'\nimport * as selectors from './selectors'\n\nconst Select = ({title, onChange, value, values}) => (\n    <div className=\"input-group input-group-sm mr-2\">\n        <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">{title}</span>\n        </div>\n        <select className=\"custom-select custom-select-sm\"\n            onChange={e => onChange(e.target.value)} value={value}>\n            {values.map(([key, value]) => (<option value={key} key={key}>{value}</option>))}\n        </select>\n    </div>\n)\n\nlet TweetNavigation = ({annotationID, eventID, advanceTweet, tweetIndex}) => {\n    const onClick = by => () => advanceTweet(annotationID, eventID, by)\n\n    return <div className=\"btn-group\" role=\"group\">\n      <button type=\"button\" className={\"btn \" + (tweetIndex.hasPrevious ? \"btn-secondary \" : \"btn-outline-secondary \")} onClick={tweetIndex.hasPrevious ? onClick(-1) : () => null}><span className=\"oi oi-media-skip-backward\"></span></button>\n      <button type=\"button\" className=\"btn btn-secondary\">{tweetIndex.tweetIndex + 1} of {tweetIndex.total}</button>\n      <button type=\"button\" className={\"btn \" + (tweetIndex.hasNext ? \"btn-secondary \" : \"btn-outline-secondary \")} onClick={tweetIndex.hasNext ? onClick(1) : () => null}><span className=\"oi oi-media-skip-forward\"></span></button>\n    </div>\n}\nTweetNavigation = connect(\n    state => ({\n        annotationID: selectors.getAnnotationID(state),\n        eventID: selectors.getEventID(state),\n        tweetIndex: selectors.getTweetIndex(state),\n    }),\n    dispatch => ({\n        advanceTweet: (annotationID, eventID, by) => dispatch(actions.advanceTweet(annotationID, eventID, by))\n    })\n)(TweetNavigation)\n\nlet TweetSlider = ({tweetIndex, onChange, annotationID, eventID}) => (\n    <div className=\"mx-auto w-25\">\n        <input type=\"range\" className=\"custom-range\"\n            min=\"0\" max={`${tweetIndex.total - 1}`}\n            value={`${tweetIndex.tweetIndex}`}\n            onChange={e => onChange(annotationID, eventID, parseInt(e.target.value))}\n        />\n    </div>\n)\nTweetSlider = connect(\n    state => ({\n        tweetIndex: selectors.getTweetIndex(state),\n        annotationID: selectors.getAnnotationID(state),\n        eventID: selectors.getEventID(state),\n\n    }),\n    dispatch => ({\n        onChange: ((annotationID, eventID, index) => dispatch(actions.setTweet(annotationID, eventID, index)))\n    })\n)(TweetSlider)\n\nlet Navigation = ({eventsAnnotatedIdentifierNameItems, annotationsIDTitleItems, onChangeAnnotation, annotationID, eventID, onChangeEvent}) => (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\n        <span className=\"navbar-brand h1 mb-0\">IS</span>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsableContent\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div>\n            <div className=\"collapse navbar-collapse\" id=\"collapsableContent\">\n                <form className=\"form-inline\">\n                    <Select title=\"Annotation\" onChange={annotationID => onChangeAnnotation(annotationID)} value={annotationID} values={annotationsIDTitleItems} />\n                    {eventsAnnotatedIdentifierNameItems && <Select title=\"Event\" onChange={eventID => onChangeEvent(annotationID, eventID)} value={eventID} values={eventsAnnotatedIdentifierNameItems} />}\n                </form>\n            </div>\n        </div>\n\n        <TweetSlider />\n        <TweetNavigation />\n\n    </nav>\n)\nNavigation = connect(\n    state => ({\n        eventsAnnotatedIdentifierNameItems: selectors.getEventsAnnotatedIdentifierNameItems(state),\n        annotationsIDTitleItems: selectors.getAnnotationsIDTitleItems(state),\n        annotationID: state.ui.annotationID,\n        eventID: selectors.getEventID(state),\n    }),\n    dispatch => ({\n        onChangeAnnotation: annotationID => dispatch(actions.annotationSelected(annotationID)),\n        onChangeEvent: (annotationID, eventID) => dispatch(actions.eventSelected(annotationID, eventID)),\n    })\n)(Navigation)\n\nlet CategoryGroup = ({categoryGroup, tweet}) => (\n    <div className=\"card mb-4\" style={{minWidth: \"200px\"}}>\n        <div className=\"card-header\">\n            <h5>{categoryGroup.title}</h5>\n        </div>\n        <ul className=\"list-group list-group-flush\">\n            {categoryGroup.categories.map((i) => (\n                <li\n                    className={'list-group-item ' + (tweet.categories && tweet.categories.has(i.id) ? 'text-white bg-secondary ' : '')}\n                    key={i.id}\n                >\n                    {i.title}\n                </li>)\n            )}\n        </ul>\n    </div>\n)\nCategoryGroup = connect(\n    state => ({\n        tweet: selectors.getTweet(state),\n    })\n)(CategoryGroup)\n\nlet Categories = ({categoryGroups}) => (\n    <div className=\"container-fluid\">\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.request} />\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.callToAction} />\n            </div>\n\n        </div>\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.report} />\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.other} />\n            </div>\n        </div>\n    </div>\n)\nCategories = connect(\n    state => ({\n        categoryGroups: state.categoryGroups,\n    })\n)(Categories)\n\nlet EventDescription = ({eventInfo}) => (\n    <div>\n        <h5 className=\"mt-5\">Event description</h5>\n        <p dangerouslySetInnerHTML={{__html: objectPath.get(eventInfo, 'description')}} />\n    </div>\n)\nEventDescription = connect(\n    state => ({eventInfo: selectors.getEventInfo(state)})\n)(EventDescription)\n\nlet TweetBox = ({tweet}) => (\n    <div key={`tweet-${tweet.postID}`}>\n        {tweet && <TweetEmbed id={tweet.postID} />}\n    </div>\n)\nTweetBox = connect(\n    state => ({\n        tweet: selectors.getTweet(state),\n    })\n)(TweetBox)\n\nconst App = () => (\n    <div>\n        <Navigation />\n\n        <main className=\"container-fluid\" role=\"main\">\n            <div className=\"row mx-1\">\n                <div className=\"col jumbotron mx-auto\" style={{minWidth: \"300px\", maxWidth: \"500px\"}}>\n                    <TweetBox />\n                    <EventDescription />\n                </div>\n                <div className=\"col jumbotron ml-2\">\n                <Categories />\n                </div>\n            </div>\n        </main>\n\n        <footer className=\"footer\">\n            <div className=\"container\">\n                <span className=\"text-muted\">Navigatoin trough the stream.</span>\n            </div>\n        </footer>\n    </div>\n)\n\nexport default App;\n","import * as actions from './actions'\n\nexport const ui = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_SELECTED: {\n        return {\n            ...state,\n            annotationID: action.annotationID,\n        }}\n    case actions.EVENT_SELECTED: {\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    eventID: action.eventID,\n                },\n            }\n        }\n    }\n    case actions.ADVANCE_TWEET: {\n        const byEvent = {\n            ...(state.byAnnotation[action.annotationID].byEvent || {})\n        }\n        byEvent[action.eventID] = {\n            ...byEvent[action.eventID],\n            tweetIndex: ((byEvent[action.eventID] || {}).tweetIndex || 0) + action.by\n        }\n\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    byEvent,\n                },\n            }\n        }\n    }\n    case actions.SET_TWEET: {\n        const byEvent = {\n            ...(state.byAnnotation[action.annotationID].byEvent || {})\n        }\n        byEvent[action.eventID] = {\n            ...byEvent[action.eventID],\n            tweetIndex: action.index\n        }\n\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    byEvent,\n                },\n            }\n        }\n    }\n    default: {\n        return state\n    }}\n}\n\nexport const annotations = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_RECEIVED: {\n        return {\n            ...state,\n            [action.annotationID]: {\n                ...(state[action.annotationID] || {}),\n                payload: action.payload,\n            }\n        }}\n    default: {\n        return state\n    }}\n}\n\nexport const categoryGroups = (state = {}, action) => state\n","import { observer } from 'redux-observers'\n\nimport * as actions from './actions'\nimport * as selectors from './selectors'\n\nconst annotationObserver = observer(\n  state => state.ui.annotationID,\n  (dispatch, current, previous) => {\n      dispatch(actions.fetchAnnotation(current))\n  }\n)\n\nconst eventAnnotationObserver = observer(\n    state => ({\n        annotationID: state.ui.annotationID,\n        annotation: state.annotations[state.ui.annotationID],\n        eventID: selectors.getEventID(state),\n    }),\n    (dispatch, {annotationID, annotation, eventID}, previous) => {\n        if (annotation.payload && !eventID) {\n            dispatch(actions.eventSelected(annotationID, annotation.payload.events[0].eventid))\n        }\n    }\n)\n\n\nexport default [annotationObserver, eventAnnotationObserver]\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport logger from 'redux-logger';\nimport { observe } from 'redux-observers'\nimport thunk from 'redux-thunk'\n\nimport App from './App'\nimport * as reducers from './reducers'\nimport observers from './observers'\nimport * as actions from './actions'\n\nconst rootReducer = combineReducers(reducers)\n\nconst initialState = window._state\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk, logger))\nwindow.store = store\n\nobserve(store, observers)\n\nstore.dispatch(actions.fetchAnnotation(initialState.ui.annotationID))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}