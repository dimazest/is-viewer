{"version":3,"sources":["serviceWorker.js","tweet-embed.js","actions.js","selectors.js","App.js","reducers.js","observers.js","index.js"],"names":["Boolean","window","location","hostname","match","callbacks","TweetEmbed","_this","this","renderTweet","twttr","ready","then","_ref","widgets","_this$props","props","id","options","createTweet","_div","protocol","indexOf","src","cb","length","push","s","document","createElement","setAttribute","onload","forEach","body","appendChild","addScript","concat","_this2","react_default","a","className","ref","c","React","Component","defaultProps","fetchAnnotation","annotationID","dispatch","getState","state","annotation","objectPath","get","payload","fetch","url","r","json","j","type","annotationReceived","Object","objectSpread","events","Map","map","v","eventid","tweets","t","categories","Set","annotator","eventsAnnotated","identifier","eventSelected","eventID","getEventsMetadata","annotations","ui","getAnnotationID","_ref2","getAnnotations","_ref3","getAnnotation","getEventID","_ref4","getRunID","_ref5","getEventsAnnotatedIdentifierNameItems","createSelector","toConsumableArray","_ref7","_ref8","slicedToArray","name","getAnnotationsIDTitleItems","entries","_ref9","_ref10","title","getTweets","_ref6","getTweetIndex","tweetIndex","hasPrevious","hasNext","total","getTweet","getRun","runs","getTweetsCategories","topic","datasetTopicMapping","getBasicScore","tweetsCategories","run","reduce","_ref13","_ref14","toArray","h","rest","slice","setA","setB","_intersection","_iteratorNormalCompletion","_didIteratorError","_iteratorError","undefined","_step","_iterator","Symbol","iterator","next","done","elem","value","has","add","err","return","intersection","postID","size","reverse","Select","onChange","values","e","target","key","TweetNavigation","advanceTweet","onClick","by","role","connect","selectors","arguments","actions","TweetSlider","min","max","parseInt","index","Navigation","eventsAnnotatedIdentifierNameItems","annotationsIDTitleItems","onChangeAnnotation","onChangeEvent","runIDTitleItems","onChangeRun","runID","currentBasicScore","lastBasicScore","data-toggle","data-target","App_Select","App_TweetSlider","App_TweetNavigation","_ref11","_ref12","i","_ref12$","runURL","CategoryGroup","categoryGroup","tweet","runTweetCategories","style","minWidth","itemHighlight","badgeHighlight","Categories","categoryGroups","App_CategoryGroup","request","callToAction","report","other","EventDescription","eventInfo","dangerouslySetInnerHTML","__html","TweetBox","tweet_embed","App","App_Navigation","maxWidth","App_TweetBox","App_EventDescription","App_Categories","action","byAnnotation","defineProperty","byEvent","observers","observer","previous","text","result","split","l","console","log","tweetID","category","runReceived","rootReducer","combineReducers","reducers","initialState","_state","store","createStore","applyMiddleware","thunk","logger","observe","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.aafd8dbf.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* https://github.com/capaj/react-tweet-embed/blob/master/tweet-embed.js */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst callbacks = []\n\nfunction addScript (src, cb) {\n    if (callbacks.length === 0) {\n        callbacks.push(cb)\n        var s = document.createElement('script')\n        s.setAttribute('src', src)\n        s.onload = () => callbacks.forEach((cb) => cb())\n        document.body.appendChild(s)\n    } else {\n        callbacks.push(cb)\n    }\n}\n\n\nclass TweetEmbed extends React.Component {\n    componentDidMount () {\n        const renderTweet = () => {\n            window.twttr.ready().then(({ widgets }) => {\n                const { id, options } = this.props\n\n                // this._div.innerHTML = `\n                //     <blockquote class=\"twitter-tweet card-blockquote\" data-dnt=\"true\">\n                //         <div class=\"card custom-tweet\">\n                //             <div class=\"card-block\">\n                //                 <header>\n                //                     <p class=\"twitter-user-name\">${ this.props.user_name }</p>\n                //                         <small class=\"text-muted\">@${ this.props.screen_name }</small>\n                //                 </header>\n                //                             <blockquote class=\"card-blockquote\">\n                //                                 <p dir=\"ltr\" lang=\"${ this.props.lang }\" class=\"card-text\">\n                //                                     ${this.props.text}\n                //                                 </p>\n                //                                     <small>\n                //                                         <a href=\"https://twitter.com/${this.props.screen_name}/status/${id}\">${this.props.created_at}</a>\n                //                                     </small>\n                //                             </blockquote>\n                //             </div>\n                //         </div>\n                //     </blockquote>\n                // `\n                //\n                // widgets.load(this._div)\n\n                widgets.createTweet(id, this._div, options)\n                // .then(onTweetLoadSuccess)\n                // .catch(onTweetLoadError)\n\n            })\n        }\n\n        if (!window.twttr) {\n            const isLocal = window.location.protocol.indexOf('file') >= 0\n            const protocol = isLocal ? this.props.protocol : ''\n\n            addScript(`${protocol}//platform.twitter.com/widgets.js`, renderTweet)\n        } else {\n            renderTweet()\n        }\n    }\n\n    render () {\n        return <div className={this.props.className} ref={(c) => {\n                this._div = c\n        }} />\n    }\n}\n\nTweetEmbed.propTypes = {\n    id: PropTypes.string,\n    options: PropTypes.object,\n    protocol: PropTypes.string,\n    onTweetLoadSuccess: PropTypes.func,\n    onTweetLoadError: PropTypes.func,\n    className: PropTypes.string,\n    user_name: PropTypes.string,\n    screen_name: PropTypes.string,\n    lang: PropTypes.string,\n    text: PropTypes.string,\n    created_at: PropTypes.string\n}\n\nTweetEmbed.defaultProps = {\n    protocol: 'https:',\n    options: {},\n    className: null\n}\n\nexport default TweetEmbed\n","import objectPath from 'object-path'\n\nexport const ANNOTATION_SELECTED = 'ANNOTATION_SELECTED'\nexport const annotationSelected = (annotationID) => ({\n        type: ANNOTATION_SELECTED,\n        annotationID,\n})\n\nexport const ANNOTATION_RECEIVED = 'ANNOTATION_RECEIVED'\nexport const annotationReceived = (annotationID, payload) => ({\n    type: ANNOTATION_RECEIVED,\n    annotationID,\n    payload,\n})\n\nexport const ANNOTATION_FETCH_REQUESTED = 'ANNOTATION_FETCH_REQUESTED'\nexport const fetchAnnotation = annotationID => (\n    (dispatch, getState) => {\n        const state = getState()\n        const annotation  = objectPath.get(state, ['annotations', annotationID])\n        if (!annotation.payload) {\n            return fetch(annotation.url)\n            .then(r => r.json())\n            .then(j => dispatch(annotationReceived(\n                annotationID,\n                {\n                    ...j,\n                    events: new Map(j.events.map(v => [\n                        v.eventid,\n                        {\n                            ...v,\n                            tweets: v.tweets.map(t => ({...t, categories: new Set(t.categories)}))\n                        }\n                    ])),\n                    annotator: {\n                        ...j.annotator,\n                        eventsAnnotated: new Map(j.annotator.eventsAnnotated.map(v => [v.identifier, v])),\n                    },\n                }\n            )))\n    }}\n)\n\nexport const EVENT_SELECTED = 'EVENT_SELECTED'\nexport const eventSelected = (annotationID, eventID) => ({\n    type: EVENT_SELECTED,\n    annotationID, eventID,\n})\n\nexport const ADVANCE_TWEET = 'ADVANCE_TWEET'\nexport const advanceTweet = (annotationID, eventID, by=1) => ({\n    type: ADVANCE_TWEET,\n    annotationID, eventID, by,\n})\n\nexport const SET_TWEET = 'SET_TWEET'\nexport const setTweet = (annotationID, eventID, index) => ({\n    type: SET_TWEET,\n    annotationID, eventID, index,\n})\n\nexport const RUN_SELECTED = 'RUN_SELECTED'\nexport const runSelected = (annotationID, runID) => ({\n    type: RUN_SELECTED,\n    annotationID, runID,\n})\n\nexport const RUN_RECEIVED = 'RUN_RECEIVED'\nexport const runReceived = (annotationID, runID, payload) => ({\n    type: RUN_RECEIVED,\n    annotationID, runID, payload,\n})\n\nexport const fetchRun = (annotationID, runID, runURL) => (\n    (dispatch, getState) => {\n        return fetch(runURL)\n            .then(r => r.text())\n            .then(t => {\n                const result = {}\n                for (let l of t.split('\\n')) {\n                    if (l === '') {\n                        continue\n                    }\n\n                    const v = l.split(/\\s+/)\n\n                    if (v.length < 7 ) {\n                        console.log(v)\n                        console.log(`Could not read line in ${runURL}: ${l}`)\n                        break\n                    }\n\n                    const topic = v[0]\n                    const tweetID = v[2]\n                    const category = v[5].split('-')[1]\n\n                    if (!result[topic]) {\n                        result[topic] = {}\n                    }\n                    if (!result[topic][tweetID]) {\n                        result[topic][tweetID] = new Set()\n                    }\n\n                    result[topic][tweetID].add(category)\n                }\n                dispatch(runReceived(annotationID, runID, result))\n            })\n    }\n)\n","import { createSelector } from 'reselect'\nimport objectPath from 'object-path'\n\nexport const getEventsMetadata = ({annotations, ui}) => objectPath.get(annotations, [ui.annotationID, 'payload', 'annotator', 'eventsAnnotated'], new Map())\nexport const getAnnotationID = ({ui}) => ui.annotationID\nexport const getAnnotations = ({annotations}) => annotations\nexport const getAnnotation = state => objectPath.get(getAnnotations(state), [getAnnotationID(state)], {})\nexport const getEventID = ({ui}) => objectPath.get(ui, ['byAnnotation', ui.annotationID, 'eventID'])\nexport const getRunID = ({ui}) => objectPath.get(ui, ['byAnnotation', ui.annotationID, 'runID'])\nexport const getEvents = ({annotations, ui}) => objectPath.get(annotations, [ui.annotationID, 'payload', 'events'], new Map())\n\nexport const getEventInfo = state => {\n    const events = getEventsMetadata(state)\n    const eventID = getEventID(state)\n\n    return events.get(eventID)\n}\n\nexport const getEventsAnnotatedIdentifierNameItems = createSelector(\n    [getEventsMetadata],\n    eventsAnnotated => [...eventsAnnotated].map(([k, v]) => [v.identifier, v.name])\n)\n\nexport const getAnnotationsIDTitleItems = createSelector(\n    [getAnnotations],\n    annotations => Object.entries(annotations).map(([key, {title}]) => [key, title])\n)\n\nexport const getTweets = createSelector(\n    [getEvents, getEventID],\n    (events, eventID) => (events.get(eventID) || {}).tweets || [{}]\n)\n\nexport const getTweetIndex = state => {\n    const annotationID = getAnnotationID(state)\n    const eventID = getEventID(state)\n    const tweets = getTweets(state)\n    const tweetIndex = objectPath.get(state, ['ui', 'byAnnotation', annotationID, 'byEvent', eventID], {}).tweetIndex || 0\n    return {\n        hasPrevious: tweetIndex > 0,\n        hasNext: tweetIndex < tweets.length - 1,\n        total: tweets.length,\n        tweetIndex,\n    }\n}\n\nexport const getTweet = state => getTweets(state)[getTweetIndex(state).tweetIndex] || {}\n\nexport const getTopicID = state => getAnnotation(state).datasetTopicMapping[getEventID(state)]\nexport const getRunIDTitleItems = state => Object.entries(getAnnotation(state).runs).map(([i, {url, title}]) => [i, title])\nexport const getRun = state => getAnnotation(state).runs[getRunID(state)] || {}\nexport const getTweetsCategories = state => {\n    const annotation = getAnnotation(state)\n    const topic = annotation.datasetTopicMapping[getEventID(state)]\n\n    return (getRun(state).payload || {})[topic] || {}\n\n}\nexport const getRunTweetCategories = state => getTweetsCategories(state)[getTweet(state).postID]\n\n\nfunction intersection(setA, setB) {\n    var _intersection = new Set();\n    for (var elem of setB) {\n        if (setA.has(elem)) {\n            _intersection.add(elem);\n        }\n    }\n    return _intersection;\n}\n\nexport const getBasicScore = createSelector(\n    [getTweets, getTweetsCategories, getRun],\n    (tweets, tweetsCategories, run) => {\n        if (!run.payload) {\n            return [null]\n        }\n\n        const scores = tweets.reduce(\n            ([h, ...rest], t) => (\n                [\n                    h + ((intersection(t.categories, tweetsCategories[t.postID] || new Set())).size > 0 ? 1 : 0),\n                    h,\n                    ...rest\n                ]\n            ),\n            [0]\n        ).reverse().slice(1)\n\n        return scores\n    }\n)\n\nexport const getCurrentBasicScore = state => getBasicScore(state)[getTweetIndex(state).tweetIndex]\nexport const getLastBasicScore = state => getBasicScore(state).slice(-1)[0]\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'open-iconic/font/css/open-iconic-bootstrap.css';\nimport './App.css';\n\nimport { connect } from 'react-redux'\nimport objectPath from 'object-path'\n\nimport TweetEmbed from './tweet-embed'\n\nimport * as actions from './actions'\nimport * as selectors from './selectors'\n\nconst Select = ({title, onChange, value, values}) => (\n    <div className=\"input-group input-group-sm mr-2\">\n        <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">{title}</span>\n        </div>\n        <select className=\"custom-select custom-select-sm\"\n            onChange={e => onChange(e.target.value)} value={value}>\n            {values.map(([key, value]) => (<option value={key} key={key}>{value}</option>))}\n        </select>\n    </div>\n)\n\nlet TweetNavigation = ({annotationID, eventID, advanceTweet, tweetIndex}) => {\n    const onClick = by => () => advanceTweet(annotationID, eventID, by)\n\n    return <div className=\"btn-group\" role=\"group\">\n      <button type=\"button\" className={\"btn \" + (tweetIndex.hasPrevious ? \"btn-secondary \" : \"btn-outline-secondary \")} onClick={tweetIndex.hasPrevious ? onClick(-1) : () => null}><span className=\"oi oi-media-skip-backward\"></span></button>\n      <button type=\"button\" className=\"btn btn-secondary\">{tweetIndex.tweetIndex + 1} of {tweetIndex.total}</button>\n      <button type=\"button\" className={\"btn \" + (tweetIndex.hasNext ? \"btn-secondary \" : \"btn-outline-secondary \")} onClick={tweetIndex.hasNext ? onClick(1) : () => null}><span className=\"oi oi-media-skip-forward\"></span></button>\n    </div>\n}\nTweetNavigation = connect(\n    state => ({\n        annotationID: selectors.getAnnotationID(state),\n        eventID: selectors.getEventID(state),\n        tweetIndex: selectors.getTweetIndex(state),\n    }),\n    dispatch => ({\n        advanceTweet: (annotationID, eventID, by) => dispatch(actions.advanceTweet(annotationID, eventID, by))\n    })\n)(TweetNavigation)\n\nlet TweetSlider = ({tweetIndex, onChange, annotationID, eventID}) => (\n    <div className=\"mx-auto w-25\">\n        <input type=\"range\" className=\"custom-range\"\n            min=\"0\" max={`${tweetIndex.total - 1}`}\n            value={`${tweetIndex.tweetIndex}`}\n            onChange={e => onChange(annotationID, eventID, parseInt(e.target.value))}\n        />\n    </div>\n)\nTweetSlider = connect(\n    state => ({\n        tweetIndex: selectors.getTweetIndex(state),\n        annotationID: selectors.getAnnotationID(state),\n        eventID: selectors.getEventID(state),\n\n    }),\n    dispatch => ({\n        onChange: ((annotationID, eventID, index) => dispatch(actions.setTweet(annotationID, eventID, index)))\n    })\n)(TweetSlider)\n\nlet Navigation = ({eventsAnnotatedIdentifierNameItems, annotationsIDTitleItems, onChangeAnnotation, annotationID, eventID, onChangeEvent, runIDTitleItems, onChangeRun, runID, currentBasicScore, lastBasicScore}) => (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\n        <span className=\"navbar-brand h1 mb-0\">IS</span>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsableContent\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div>\n            <div className=\"collapse navbar-collapse\" id=\"collapsableContent\">\n                <form className=\"form-inline\">\n                    {false && <Select title=\"Annotation\" onChange={annotationID => onChangeAnnotation(annotationID)} value={annotationID} values={annotationsIDTitleItems} />}\n                    {eventsAnnotatedIdentifierNameItems && <Select title=\"Event\" onChange={eventID => onChangeEvent(annotationID, eventID)} value={eventID} values={eventsAnnotatedIdentifierNameItems} />}\n                    {eventsAnnotatedIdentifierNameItems && <Select title=\"Run\" onChange={runID => onChangeRun(annotationID, runID)} value={runID} values={[[null, ''], ...runIDTitleItems]} />}\n                    {currentBasicScore !== null &&\n                        <div className=\"input-group input-group-sm mr-2\">\n                          <div className=\"input-group-prepend\">\n                            <span className=\"input-group-text\">Current score</span>\n                          </div>\n                          <div className=\"input-group-append\">\n                            <span className=\"input-group-text\">{currentBasicScore} of {lastBasicScore}</span>\n                          </div>\n                        </div>\n                    }\n                </form>\n            </div>\n        </div>\n\n        <TweetSlider />\n        <TweetNavigation />\n\n    </nav>\n)\nNavigation = connect(\n    state => ({\n        eventsAnnotatedIdentifierNameItems: selectors.getEventsAnnotatedIdentifierNameItems(state),\n        annotationsIDTitleItems: selectors.getAnnotationsIDTitleItems(state),\n        annotationID: state.ui.annotationID,\n        eventID: selectors.getEventID(state),\n        runIDTitleItems: selectors.getRunIDTitleItems(state),\n        runID: selectors.getRunID(state),\n        currentBasicScore: selectors.getCurrentBasicScore(state),\n        lastBasicScore: selectors.getLastBasicScore(state),\n    }),\n    dispatch => ({\n        onChangeAnnotation: annotationID => dispatch(actions.annotationSelected(annotationID)),\n        onChangeEvent: (annotationID, eventID) => dispatch(actions.eventSelected(annotationID, eventID)),\n        onChangeRun: (annotationID, runURL) => dispatch(actions.runSelected(annotationID, runURL)),\n    })\n)(Navigation)\n\nlet CategoryGroup = ({categoryGroup, tweet, runTweetCategories}) => (\n    <div className=\"card mb-4\" style={{minWidth: \"200px\"}}>\n        <div className=\"card-header\">\n            <h5>{categoryGroup.title}</h5>\n        </div>\n\n        <ul className=\"list-group list-group-flush\">\n            {categoryGroup.categories.map((i) => {\n                let itemHighlight = tweet.categories && tweet.categories.has(i.id)\n                let badgeHighlight = null\n                if (runTweetCategories) {\n                    itemHighlight = runTweetCategories.has(i.id)\n                    badgeHighlight = tweet.categories && tweet.categories.has(i.id)\n                }\n\n                return <li\n                    className={'list-group-item ' + (itemHighlight ? 'text-white bg-secondary ' : '')}\n                    key={i.id}\n                >\n                    {i.title}\n                    {badgeHighlight !== null && !(!badgeHighlight  && !itemHighlight)  &&\n                        <span className={\"badge float-right mr-2 \" + (badgeHighlight === itemHighlight ? 'badge-success ' : 'badge-danger')}>\n                            {\n                                badgeHighlight === itemHighlight\n                                ? 'Correct'\n                                : (badgeHighlight? 'Missing' : 'Incorrect')}\n                        </span>\n                    }\n                </li>\n            })}\n        </ul>\n    </div>\n)\nCategoryGroup = connect(\n    state => ({\n        tweet: selectors.getTweet(state),\n        runTweetCategories: selectors.getRunTweetCategories(state),\n    })\n)(CategoryGroup)\n\nlet Categories = ({categoryGroups}) => (\n    <div className=\"container-fluid\">\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.request} />\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.callToAction} />\n            </div>\n\n        </div>\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.report} />\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.other} />\n            </div>\n        </div>\n    </div>\n)\nCategories = connect(\n    state => ({\n        categoryGroups: state.categoryGroups,\n    })\n)(Categories)\n\nlet EventDescription = ({eventInfo}) => (\n    <div>\n        <h5 className=\"mt-5\">Event description</h5>\n        <p dangerouslySetInnerHTML={{__html: objectPath.get(eventInfo, 'description')}} />\n    </div>\n)\nEventDescription = connect(\n    state => ({eventInfo: selectors.getEventInfo(state)})\n)(EventDescription)\n\nlet TweetBox = ({tweet}) => (\n    <div key={`tweet-${tweet.postID}`}>\n        {tweet && <TweetEmbed id={tweet.postID} />}\n    </div>\n)\nTweetBox = connect(\n    state => ({\n        tweet: selectors.getTweet(state),\n    })\n)(TweetBox)\n\nconst App = () => (\n    <div>\n        <Navigation />\n\n        <main className=\"container-fluid\" role=\"main\">\n            <div className=\"row mx-1\">\n                <div className=\"col jumbotron mx-auto\" style={{minWidth: \"300px\", maxWidth: \"500px\"}}>\n                    <TweetBox />\n                    <EventDescription />\n                </div>\n                <div className=\"col jumbotron ml-2\">\n                <Categories />\n                </div>\n            </div>\n        </main>\n    </div>\n)\n\nexport default App;\n","import * as actions from './actions'\n\nexport const ui = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_SELECTED: {\n        return {\n            ...state,\n            annotationID: action.annotationID,\n        }}\n    case actions.EVENT_SELECTED: {\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    eventID: action.eventID,\n                },\n            }\n        }\n    }\n    case actions.RUN_SELECTED: {\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    runID: action.runID,\n                },\n            }\n        }\n    }\n    case actions.ADVANCE_TWEET: {\n        const byEvent = {\n            ...(state.byAnnotation[action.annotationID].byEvent || {})\n        }\n        byEvent[action.eventID] = {\n            ...byEvent[action.eventID],\n            tweetIndex: ((byEvent[action.eventID] || {}).tweetIndex || 0) + action.by\n        }\n\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    byEvent,\n                },\n            }\n        }\n    }\n    case actions.SET_TWEET: {\n        const byEvent = {\n            ...(state.byAnnotation[action.annotationID].byEvent || {})\n        }\n        byEvent[action.eventID] = {\n            ...byEvent[action.eventID],\n            tweetIndex: action.index\n        }\n\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    byEvent,\n                },\n            }\n        }\n    }\n    default: {\n        return state\n    }}\n}\n\nexport const annotations = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_RECEIVED: {\n        return {\n            ...state,\n            [action.annotationID]: {\n                ...(state[action.annotationID] || {}),\n                payload: action.payload,\n            }\n        }}\n    case actions.RUN_RECEIVED: {\n        return {\n            ...state,\n            [action.annotationID]: {\n                ...state[action.annotationID],\n                runs: {\n                    ...state[action.annotationID].runs,\n                    [action.runID]: {\n                        ...state[action.annotationID].runs[action.runID],\n                        payload: action.payload,\n                    }\n                }\n            }\n        }\n    }\n    default: {\n        return state\n    }}\n}\n\nexport const categoryGroups = (state = {}, action) => state\n","import { observer } from 'redux-observers'\n\nimport * as actions from './actions'\nimport * as selectors from './selectors'\n\nconst annotationObserver = observer(\n  state => state.ui.annotationID,\n  (dispatch, annotationID, previous) => {\n      dispatch(actions.fetchAnnotation(annotationID))\n  }\n)\n\nconst eventAnnotationObserver = observer(\n    state => ({\n        annotationID: selectors.getAnnotationID(state),\n        annotation: selectors.getAnnotation(state),\n        eventID: selectors.getEventID(state),\n    }),\n    (dispatch, {annotationID, annotation, eventID}, previous) => {\n        if (annotation.payload && !eventID) {\n            dispatch(actions.eventSelected(annotationID, annotation.payload.events[0].eventid))\n        }\n    }\n)\n\nconst runObserver = observer(\n    state => ({\n        annotationID: selectors.getAnnotationID(state),\n        runID: selectors.getRunID(state),\n        runURL: selectors.getRun(state).url,\n\n    }),\n    (dispatch, {annotationID, runID, runURL}, previous) => {\n        dispatch(actions.fetchRun(annotationID, runID, runURL))\n    }\n)\n\nexport default [annotationObserver, eventAnnotationObserver, runObserver]\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport logger from 'redux-logger';\nimport { observe } from 'redux-observers'\nimport thunk from 'redux-thunk'\n\nimport App from './App'\nimport * as reducers from './reducers'\nimport observers from './observers'\nimport * as actions from './actions'\n\nconst rootReducer = combineReducers(reducers)\n\nconst initialState = window._state\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk, logger))\nwindow.store = store\n\nobserve(store, observers)\n\nstore.dispatch(actions.fetchAnnotation(initialState.ui.annotationID))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}