{"version":3,"sources":["serviceWorker.js","tweet-embed.js","actions.js","selectors.js","App.js","reducers.js","observers.js","index.js"],"names":["Boolean","window","location","hostname","match","callbacks","TweetEmbed","_this","this","renderTweet","twttr","ready","then","_ref","widgets","_this$props","props","id","options","createTweet","_div","protocol","indexOf","src","cb","length","push","s","document","createElement","setAttribute","onload","forEach","body","appendChild","addScript","concat","_this2","react_default","a","className","ref","c","React","Component","defaultProps","fetchAnnotation","annotationID","dispatch","getState","state","annotation","objectPath","get","payload","fetch","url","r","json","j","type","annotationReceived","Object","objectSpread","events","Map","map","v","eventid","annotator","eventsAnnotated","identifier","eventSelected","eventID","getEventsMetadata","annotations","ui","getAnnotationID","_ref2","getEventID","_ref3","byAnnotation","getEventsAnnotatedIdentifierNameItems","createSelector","toConsumableArray","_ref5","_ref6","slicedToArray","name","getAnnotationsIDTitleItems","entries","_ref7","_ref8","title","getTweets","_ref4","tweets","getTweetIndex","tweetIndex","hasPrevious","hasNext","total","Select","onChange","value","values","e","target","key","Navigation","eventsAnnotatedIdentifierNameItems","annotationsIDTitleItems","onChangeAnnotation","onChangeEvent","data-toggle","data-target","aria-controls","aria-expanded","aria-label","App_Select","connect","selectors","actions","CategoryGroup","categories","style","minWidth","Categories","App_CategoryGroup","EventDescription","eventInfo","dangerouslySetInnerHTML","__html","TweetBox","tweetID","tweet_embed","postID","TweetNavigation","advanceTweet","onClick","by","role","arguments","undefined","App","App_Navigation","maxWidth","App_TweetNavigation","App_TweetBox","App_EventDescription","App_Categories","action","defineProperty","byEvent","observers","observer","current","previous","rootReducer","combineReducers","reducers","initialState","_state","store","createStore","applyMiddleware","thunk","logger","observe","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.eaf25647.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* https://github.com/capaj/react-tweet-embed/blob/master/tweet-embed.js */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst callbacks = []\n\nfunction addScript (src, cb) {\n    if (callbacks.length === 0) {\n        callbacks.push(cb)\n        var s = document.createElement('script')\n        s.setAttribute('src', src)\n        s.onload = () => callbacks.forEach((cb) => cb())\n        document.body.appendChild(s)\n    } else {\n        callbacks.push(cb)\n    }\n}\n\n\nclass TweetEmbed extends React.Component {\n    componentDidMount () {\n        const renderTweet = () => {\n            window.twttr.ready().then(({ widgets }) => {\n                const { id, options } = this.props\n\n                // this._div.innerHTML = `\n                //     <blockquote class=\"twitter-tweet card-blockquote\" data-dnt=\"true\">\n                //         <div class=\"card custom-tweet\">\n                //             <div class=\"card-block\">\n                //                 <header>\n                //                     <p class=\"twitter-user-name\">${ this.props.user_name }</p>\n                //                         <small class=\"text-muted\">@${ this.props.screen_name }</small>\n                //                 </header>\n                //                             <blockquote class=\"card-blockquote\">\n                //                                 <p dir=\"ltr\" lang=\"${ this.props.lang }\" class=\"card-text\">\n                //                                     ${this.props.text}\n                //                                 </p>\n                //                                     <small>\n                //                                         <a href=\"https://twitter.com/${this.props.screen_name}/status/${id}\">${this.props.created_at}</a>\n                //                                     </small>\n                //                             </blockquote>\n                //             </div>\n                //         </div>\n                //     </blockquote>\n                // `\n                //\n                // widgets.load(this._div)\n\n                widgets.createTweet(id, this._div, options)\n                // .then(onTweetLoadSuccess)\n                // .catch(onTweetLoadError)\n\n            })\n        }\n\n        if (!window.twttr) {\n            const isLocal = window.location.protocol.indexOf('file') >= 0\n            const protocol = isLocal ? this.props.protocol : ''\n\n            addScript(`${protocol}//platform.twitter.com/widgets.js`, renderTweet)\n        } else {\n            renderTweet()\n        }\n    }\n\n    render () {\n        return <div className={this.props.className} ref={(c) => {\n                this._div = c\n        }} />\n    }\n}\n\nTweetEmbed.propTypes = {\n    id: PropTypes.string,\n    options: PropTypes.object,\n    protocol: PropTypes.string,\n    onTweetLoadSuccess: PropTypes.func,\n    onTweetLoadError: PropTypes.func,\n    className: PropTypes.string,\n    user_name: PropTypes.string,\n    screen_name: PropTypes.string,\n    lang: PropTypes.string,\n    text: PropTypes.string,\n    created_at: PropTypes.string\n}\n\nTweetEmbed.defaultProps = {\n    protocol: 'https:',\n    options: {},\n    className: null\n}\n\nexport default TweetEmbed\n","import objectPath from 'object-path'\n\n\nexport const ANNOTATION_SELECTED = 'ANNOTATION_SELECTED'\nexport const annotationSelected = (annotationID) => ({\n        type: ANNOTATION_SELECTED,\n        annotationID,\n})\n\nexport const ANNOTATION_RECEIVED = 'ANNOTATION_RECEIVED'\nexport const annotationReceived = (annotationID, payload) => ({\n    type: ANNOTATION_RECEIVED,\n    annotationID,\n    payload,\n})\n\nexport const ANNOTATION_FETCH_REQUESTED = 'ANNOTATION_FETCH_REQUESTED'\nexport const fetchAnnotation = annotationID => (\n    (dispatch, getState) => {\n        const state = getState()\n        const annotation  = objectPath.get(state, ['annotations', annotationID])\n        if (!annotation.payload) {\n            return fetch(annotation.url)\n            .then(r => r.json())\n            .then(j => dispatch(annotationReceived(\n                annotationID,\n                {\n                    ...j,\n                    events: new Map(j.events.map(v => [v.eventid, v])),\n                    annotator: {\n                        ...j.annotator,\n                        eventsAnnotated: new Map(j.annotator.eventsAnnotated.map(v => [v.identifier, v])),\n                    },\n                }\n            )))\n    }}\n)\n\nexport const EVENT_SELECTED = 'EVENT_SELECTED'\nexport const eventSelected = (annotationID, eventID) => ({\n    type: EVENT_SELECTED,\n    annotationID, eventID,\n})\n\nexport const ADVANCE_TWEET = 'ADVANCE_TWEET'\nexport const advanceTweet = (annotationID, eventID, by=1) => ({\n    type: ADVANCE_TWEET,\n    annotationID, eventID, by,\n})\n","import { createSelector } from 'reselect'\nimport objectPath from 'object-path'\n\nexport const getEventsMetadata = ({annotations, ui}) => objectPath.get(annotations, [ui.annotationID, 'payload', 'annotator', 'eventsAnnotated'], new Map())\nexport const getAnnotationID = ({ui}) => ui.annotationID\nexport const getEventID = ({ui}) => ui.byAnnotation[ui.annotationID].eventID\nexport const getAnnotations = state => state.annotations\nexport const getEvents = ({annotations, ui}) => objectPath.get(annotations, [ui.annotationID, 'payload', 'events'], new Map())\n\nexport const getEventInfo = state => {\n    const events = getEventsMetadata(state)\n    const eventID = getEventID(state)\n\n    return events.get(eventID)\n}\n\nexport const getEventsAnnotatedIdentifierNameItems = createSelector(\n    [getEventsMetadata],\n    eventsAnnotated => [...eventsAnnotated].map(([k, v]) => [v.identifier, v.name])\n)\n\nexport const getAnnotationsIDTitleItems = createSelector(\n    [getAnnotations],\n    annotations => Object.entries(annotations).map(([key, {title}]) => [key, title])\n)\n\nexport const getTweets = createSelector(\n    [getEvents, getEventID],\n    (events, eventID) => (events.get(eventID) || {}).tweets || [{}]\n)\n\nexport const getTweetIndex = state => {\n    const annotationID = getAnnotationID(state)\n    const eventID = getEventID(state)\n    const tweets = getTweets(state)\n    const tweetIndex = objectPath.get(state, ['ui', 'byAnnotation', annotationID, 'byEvent', eventID], {}).tweetIndex || 0\n    return {\n        hasPrevious: tweetIndex > 0,\n        hasNext: tweetIndex < tweets.length,\n        total: tweets.length,\n        tweetIndex,\n    }\n}\n\nexport const getTweetID = state => (getTweets(state)[getTweetIndex(state).tweetIndex] || {}).postID\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'open-iconic/font/css/open-iconic-bootstrap.css';\nimport './App.css';\n\nimport { connect } from 'react-redux'\nimport objectPath from 'object-path'\n\nimport TweetEmbed from './tweet-embed'\n\nimport * as actions from './actions'\nimport * as selectors from './selectors'\n\nconst Select = ({title, onChange, value, values}) => (\n    <div className=\"input-group input-group-sm mr-2\">\n        <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">{title}</span>\n        </div>\n        <select className=\"custom-select custom-select-sm\"\n            onChange={e => onChange(e.target.value)} value={value}>\n            {values.map(([key, value]) => (<option value={key} key={key}>{value}</option>))}\n        </select>\n    </div>\n)\n\nlet Navigation = ({eventsAnnotatedIdentifierNameItems, annotationsIDTitleItems, onChangeAnnotation, annotationID, eventID, onChangeEvent}) => (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\n        <span className=\"navbar-brand h1 mb-0\">Incident Streams</span>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n            <form className=\"form-inline\">\n                <Select title=\"Annotation\" onChange={annotationID => onChangeAnnotation(annotationID)} value={annotationID} values={annotationsIDTitleItems} />\n                {eventsAnnotatedIdentifierNameItems && <Select title=\"Event\" onChange={eventID => onChangeEvent(annotationID, eventID)} value={eventID} values={eventsAnnotatedIdentifierNameItems} />}\n            </form>\n        </div>\n    </nav>\n)\nNavigation = connect(\n    state => ({\n        eventsAnnotatedIdentifierNameItems: selectors.getEventsAnnotatedIdentifierNameItems(state),\n        annotationsIDTitleItems: selectors.getAnnotationsIDTitleItems(state),\n        annotationID: state.ui.annotationID,\n        eventID: selectors.getEventID(state),\n    }),\n    dispatch => ({\n        onChangeAnnotation: annotationID => dispatch(actions.annotationSelected(annotationID)),\n        onChangeEvent: (annotationID, eventID) => dispatch(actions.eventSelected(annotationID, eventID)),\n    })\n)(Navigation)\n\nconst CategoryGroup = ({title, categories}) => (\n    <div className=\"card mb-4\" style={{minWidth: \"200px\"}}>\n        <div className=\"card-header\">\n            <h5>{title}</h5>\n        </div>\n        <ul className=\"list-group list-group-flush\">\n            {categories.map((c) =><li className=\"list-group-item\" key={c}>{c}</li>)}\n        </ul>\n    </div>\n)\n\nconst Categories = () => (\n    <div className=\"container-fluid\">\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup title=\"Request\" categories={[\"Goods and Services\", \"Search and Rescue\", \"Information Wanted\"]}/>\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup title=\"Call to Action\" categories={[\"Volunteer\", \"Donations\", \"Move People\"]}/>\n            </div>\n\n        </div>\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup title=\"Report\" categories={[\n                        \"First Party Observation\", \"Third Party Observation\", \"Weather\",\n                        \"Emerging Threats\", \"Significant Event Change\", \"Multimedia Share\",\n                        \"Service Available\", \"Factoid\", \"Official\", \"Clenaup\", \"Hashtags\"]}/>\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup title=\"Other\" categories={[\n                        \"Past News\", \"Continuing News\", \"Advice\", \"Sentiment\", \"Discussion\",\n                        \"Irrelevant\", \"Unknown\", \"Known already\"]}/>\n            </div>\n        </div>\n    </div>\n)\n\nlet EventDescription = ({eventInfo}) => (\n    <div>\n        <h5 className=\"mt-5\">Event description</h5>\n        <p dangerouslySetInnerHTML={{__html: objectPath.get(eventInfo, 'description')}} />\n    </div>\n)\nEventDescription = connect(\n    state => ({eventInfo: selectors.getEventInfo(state)})\n)(EventDescription)\n\nlet TweetBox = ({tweetID}) => (\n    <div key={`tweet-${tweetID}`}>\n        {tweetID && <TweetEmbed id={tweetID} />}\n    </div>\n)\nTweetBox = connect(\n    state => ({\n        tweetID: selectors.getTweetID(state),\n    })\n)(TweetBox)\n\nlet TweetNavigation = ({annotationID, eventID, advanceTweet, tweetIndex}) => {\n    const onClick = by => () => advanceTweet(annotationID, eventID, by)\n\n    return <div className=\"btn-group\" role=\"group\">\n      <button type=\"button\" className={\"btn \" + (tweetIndex.hasPrevious ? \"btn-secondary \" : \"btn-outline-secondary \")} onClick={tweetIndex.hasPrevious ? onClick(-1) : () => null}><span className=\"oi oi-media-skip-backward\"></span></button>\n      <button type=\"button\" className=\"btn btn-secondary\">{tweetIndex.tweetIndex + 1} of {tweetIndex.total}</button>\n      <button type=\"button\" className={\"btn \" + (tweetIndex.hasNext ? \"btn-secondary \" : \"btn-outline-secondary \")} onClick={tweetIndex.hasNext ? onClick(1) : () => null}><span className=\"oi oi-media-skip-forward\"></span></button>\n    </div>\n}\nTweetNavigation = connect(\n    state => ({\n        annotationID: selectors.getAnnotationID(state),\n        eventID: selectors.getEventID(state),\n        tweetIndex: selectors.getTweetIndex(state),\n    }),\n    dispatch => ({\n        advanceTweet: (annotationID, eventID, by) => dispatch(actions.advanceTweet(annotationID, eventID, by))\n    })\n)(TweetNavigation)\n\nconst App = () => (\n    <div>\n        <Navigation />\n\n        <main className=\"container-fluid\" role=\"main\">\n            <div className=\"row mx-1\">\n                <div className=\"col jumbotron mx-auto\" style={{minWidth: \"300px\", maxWidth: \"500px\"}}>\n                    <TweetNavigation />\n                    <TweetBox />\n                    <EventDescription />\n                </div>\n                <div className=\"col jumbotron ml-2\">\n                <Categories />\n                </div>\n            </div>\n        </main>\n\n        <footer className=\"footer\">\n            <div className=\"container\">\n                <span className=\"text-muted\">Navigatoin trough the stream.</span>\n            </div>\n        </footer>\n    </div>\n)\n\nexport default App;\n","import * as actions from './actions'\n\nexport const ui = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_SELECTED: {\n        return {\n            ...state,\n            annotationID: action.annotationID,\n        }}\n    case actions.EVENT_SELECTED: {\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    eventID: action.eventID,\n                },\n            }\n        }\n    }\n    case actions.ADVANCE_TWEET: {\n        const byEvent = {\n            ...(state.byAnnotation[action.annotationID].byEvent || {})\n        }\n        byEvent[action.eventID] = {\n            ...byEvent[action.eventID],\n            tweetIndex: ((byEvent[action.eventID] || {}).tweetIndex || 0) + action.by\n        }\n\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    byEvent,\n                },\n            }\n        }\n    }\n    default: {\n        return state\n    }}\n}\n\nexport const annotations = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_RECEIVED: {\n        return {\n            ...state,\n            [action.annotationID]: {\n                ...(state[action.annotationID] || {}),\n                payload: action.payload,\n            }\n        }}\n    default: {\n        return state\n    }}\n}\n","import { observer } from 'redux-observers'\n\nimport * as actions from './actions'\nimport * as selectors from './selectors'\n\nconst annotationObserver = observer(\n  state => state.ui.annotationID,\n  (dispatch, current, previous) => {\n      dispatch(actions.fetchAnnotation(current))\n  }\n)\n\nconst eventAnnotationObserver = observer(\n    state => ({\n        annotationID: state.ui.annotationID,\n        annotation: state.annotations[state.ui.annotationID],\n        eventID: selectors.getEventID(state),\n    }),\n    (dispatch, {annotationID, annotation, eventID}, previous) => {\n        if (annotation.payload && !eventID) {\n            dispatch(actions.eventSelected(annotationID, annotation.payload.events[0].eventid))\n        }\n    }\n)\n\n\nexport default [annotationObserver, eventAnnotationObserver]\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport logger from 'redux-logger';\nimport { observe } from 'redux-observers'\nimport thunk from 'redux-thunk'\n\nimport App from './App'\nimport * as reducers from './reducers'\nimport observers from './observers'\nimport * as actions from './actions'\n\nconst rootReducer = combineReducers(reducers)\n\nconst initialState = window._state\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk, logger))\nwindow.store = store\n\nobserve(store, observers)\n\nstore.dispatch(actions.fetchAnnotation(initialState.ui.annotationID))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}