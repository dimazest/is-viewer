{"version":3,"sources":["serviceWorker.js","tweet-embed.js","actions.js","selectors.js","App.js","reducers.js","observers.js","index.js"],"names":["Boolean","window","location","hostname","match","callbacks","TweetEmbed","_this","this","renderTweet","twttr","ready","then","_ref","widgets","_this$props","props","id","options","createTweet","_div","protocol","indexOf","src","cb","length","push","s","document","createElement","setAttribute","onload","forEach","body","appendChild","addScript","concat","_this2","react_default","a","className","ref","c","React","Component","defaultProps","fetchAnnotation","annotationID","dispatch","getState","state","annotation","objectPath","get","payload","fetch","url","r","json","j","type","annotationReceived","Object","objectSpread","events","Map","map","v","eventid","tweets","t","categories","Set","annotator","eventsAnnotated","identifier","eventSelected","eventID","getEventsMetadata","annotations","ui","getAnnotationID","_ref2","getAnnotations","_ref3","getAnnotation","getEventID","_ref4","getRunID","_ref5","getEventsAnnotatedIdentifierNameItems","createSelector","toConsumableArray","_ref7","_ref8","slicedToArray","name","getAnnotationsIDTitleItems","entries","_ref9","_ref10","title","getTweets","_ref6","getTweetIndex","tweetIndex","hasPrevious","hasNext","total","getTweet","getRun","runs","Select","onChange","value","values","e","target","key","TweetNavigation","advanceTweet","onClick","by","role","connect","selectors","arguments","undefined","actions","TweetSlider","min","max","parseInt","index","Navigation","eventsAnnotatedIdentifierNameItems","annotationsIDTitleItems","onChangeAnnotation","onChangeEvent","runIDTitleItems","onChangeRun","runID","data-toggle","data-target","App_Select","App_TweetSlider","App_TweetNavigation","_ref11","_ref12","i","_ref12$","runURL","CategoryGroup","categoryGroup","tweet","runTweetCategories","style","minWidth","itemHighlight","has","badgeHighlight","topic","datasetTopicMapping","postID","Categories","categoryGroups","App_CategoryGroup","request","callToAction","report","other","EventDescription","eventInfo","dangerouslySetInnerHTML","__html","TweetBox","tweet_embed","App","App_Navigation","maxWidth","App_TweetBox","App_EventDescription","App_Categories","action","byAnnotation","defineProperty","byEvent","observers","observer","previous","text","result","_iteratorNormalCompletion","_didIteratorError","_iteratorError","_step","_iterator","split","Symbol","iterator","next","done","l","console","log","tweetID","category","add","err","return","runReceived","rootReducer","combineReducers","reducers","initialState","_state","store","createStore","applyMiddleware","thunk","logger","observe","ReactDOM","render","es","src_App_0","getElementById","navigator","serviceWorker","registration","unregister"],"mappings":"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","file":"static/js/main.1ae85ceb.chunk.js","sourcesContent":["// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://goo.gl/SC7cgQ'\n          );\n        });\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n\n              // Execute callback\n              if (config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","/* https://github.com/capaj/react-tweet-embed/blob/master/tweet-embed.js */\n\nimport React from 'react'\nimport PropTypes from 'prop-types'\n\nconst callbacks = []\n\nfunction addScript (src, cb) {\n    if (callbacks.length === 0) {\n        callbacks.push(cb)\n        var s = document.createElement('script')\n        s.setAttribute('src', src)\n        s.onload = () => callbacks.forEach((cb) => cb())\n        document.body.appendChild(s)\n    } else {\n        callbacks.push(cb)\n    }\n}\n\n\nclass TweetEmbed extends React.Component {\n    componentDidMount () {\n        const renderTweet = () => {\n            window.twttr.ready().then(({ widgets }) => {\n                const { id, options } = this.props\n\n                // this._div.innerHTML = `\n                //     <blockquote class=\"twitter-tweet card-blockquote\" data-dnt=\"true\">\n                //         <div class=\"card custom-tweet\">\n                //             <div class=\"card-block\">\n                //                 <header>\n                //                     <p class=\"twitter-user-name\">${ this.props.user_name }</p>\n                //                         <small class=\"text-muted\">@${ this.props.screen_name }</small>\n                //                 </header>\n                //                             <blockquote class=\"card-blockquote\">\n                //                                 <p dir=\"ltr\" lang=\"${ this.props.lang }\" class=\"card-text\">\n                //                                     ${this.props.text}\n                //                                 </p>\n                //                                     <small>\n                //                                         <a href=\"https://twitter.com/${this.props.screen_name}/status/${id}\">${this.props.created_at}</a>\n                //                                     </small>\n                //                             </blockquote>\n                //             </div>\n                //         </div>\n                //     </blockquote>\n                // `\n                //\n                // widgets.load(this._div)\n\n                widgets.createTweet(id, this._div, options)\n                // .then(onTweetLoadSuccess)\n                // .catch(onTweetLoadError)\n\n            })\n        }\n\n        if (!window.twttr) {\n            const isLocal = window.location.protocol.indexOf('file') >= 0\n            const protocol = isLocal ? this.props.protocol : ''\n\n            addScript(`${protocol}//platform.twitter.com/widgets.js`, renderTweet)\n        } else {\n            renderTweet()\n        }\n    }\n\n    render () {\n        return <div className={this.props.className} ref={(c) => {\n                this._div = c\n        }} />\n    }\n}\n\nTweetEmbed.propTypes = {\n    id: PropTypes.string,\n    options: PropTypes.object,\n    protocol: PropTypes.string,\n    onTweetLoadSuccess: PropTypes.func,\n    onTweetLoadError: PropTypes.func,\n    className: PropTypes.string,\n    user_name: PropTypes.string,\n    screen_name: PropTypes.string,\n    lang: PropTypes.string,\n    text: PropTypes.string,\n    created_at: PropTypes.string\n}\n\nTweetEmbed.defaultProps = {\n    protocol: 'https:',\n    options: {},\n    className: null\n}\n\nexport default TweetEmbed\n","import objectPath from 'object-path'\n\nexport const ANNOTATION_SELECTED = 'ANNOTATION_SELECTED'\nexport const annotationSelected = (annotationID) => ({\n        type: ANNOTATION_SELECTED,\n        annotationID,\n})\n\nexport const ANNOTATION_RECEIVED = 'ANNOTATION_RECEIVED'\nexport const annotationReceived = (annotationID, payload) => ({\n    type: ANNOTATION_RECEIVED,\n    annotationID,\n    payload,\n})\n\nexport const ANNOTATION_FETCH_REQUESTED = 'ANNOTATION_FETCH_REQUESTED'\nexport const fetchAnnotation = annotationID => (\n    (dispatch, getState) => {\n        const state = getState()\n        const annotation  = objectPath.get(state, ['annotations', annotationID])\n        if (!annotation.payload) {\n            return fetch(annotation.url)\n            .then(r => r.json())\n            .then(j => dispatch(annotationReceived(\n                annotationID,\n                {\n                    ...j,\n                    events: new Map(j.events.map(v => [\n                        v.eventid,\n                        {\n                            ...v,\n                            tweets: v.tweets.map(t => ({...t, categories: new Set(t.categories)}))\n                        }\n                    ])),\n                    annotator: {\n                        ...j.annotator,\n                        eventsAnnotated: new Map(j.annotator.eventsAnnotated.map(v => [v.identifier, v])),\n                    },\n                }\n            )))\n    }}\n)\n\nexport const EVENT_SELECTED = 'EVENT_SELECTED'\nexport const eventSelected = (annotationID, eventID) => ({\n    type: EVENT_SELECTED,\n    annotationID, eventID,\n})\n\nexport const ADVANCE_TWEET = 'ADVANCE_TWEET'\nexport const advanceTweet = (annotationID, eventID, by=1) => ({\n    type: ADVANCE_TWEET,\n    annotationID, eventID, by,\n})\n\nexport const SET_TWEET = 'SET_TWEET'\nexport const setTweet = (annotationID, eventID, index) => ({\n    type: SET_TWEET,\n    annotationID, eventID, index,\n})\n\nexport const RUN_SELECTED = 'RUN_SELECTED'\nexport const runSelected = (annotationID, runID) => ({\n    type: RUN_SELECTED,\n    annotationID, runID,\n})\n\nexport const RUN_RECEIVED = 'RUN_RECEIVED'\nexport const runReceived = (annotationID, runID, payload) => ({\n    type: RUN_RECEIVED,\n    annotationID, runID, payload,\n})\n\nexport const fetchRun = (annotationID, runID, runURL) => (\n    (dispatch, getState) => {\n        return fetch(runURL)\n            .then(r => r.text())\n            .then(t => {\n                const result = {}\n                for (let l of t.split('\\n')) {\n                    if (l === '') {\n                        continue\n                    }\n\n                    const v = l.split(/\\s+/)\n\n                    if (v.length < 7 ) {\n                        console.log(v)\n                        console.log(`Could not read line in ${runURL}: ${l}`)\n                        break\n                    }\n\n                    const topic = v[0]\n                    const tweetID = v[2]\n                    const category = v[5].split('-')[1]\n\n                    if (!result[topic]) {\n                        result[topic] = {}\n                    }\n                    if (!result[topic][tweetID]) {\n                        result[topic][tweetID] = new Set()\n                    }\n\n                    result[topic][tweetID].add(category)\n                }\n                dispatch(runReceived(annotationID, runID, result))\n            })\n    }\n)\n","import { createSelector } from 'reselect'\nimport objectPath from 'object-path'\n\nexport const getEventsMetadata = ({annotations, ui}) => objectPath.get(annotations, [ui.annotationID, 'payload', 'annotator', 'eventsAnnotated'], new Map())\nexport const getAnnotationID = ({ui}) => ui.annotationID\nexport const getAnnotations = ({annotations}) => annotations\nexport const getAnnotation = state => objectPath.get(getAnnotations(state), [getAnnotationID(state)], {})\nexport const getEventID = ({ui}) => objectPath.get(ui, ['byAnnotation', ui.annotationID, 'eventID'])\nexport const getRunID = ({ui}) => objectPath.get(ui, ['byAnnotation', ui.annotationID, 'runID'])\nexport const getEvents = ({annotations, ui}) => objectPath.get(annotations, [ui.annotationID, 'payload', 'events'], new Map())\n\nexport const getEventInfo = state => {\n    const events = getEventsMetadata(state)\n    const eventID = getEventID(state)\n\n    return events.get(eventID)\n}\n\nexport const getEventsAnnotatedIdentifierNameItems = createSelector(\n    [getEventsMetadata],\n    eventsAnnotated => [...eventsAnnotated].map(([k, v]) => [v.identifier, v.name])\n)\n\nexport const getAnnotationsIDTitleItems = createSelector(\n    [getAnnotations],\n    annotations => Object.entries(annotations).map(([key, {title}]) => [key, title])\n)\n\nexport const getTweets = createSelector(\n    [getEvents, getEventID],\n    (events, eventID) => (events.get(eventID) || {}).tweets || [{}]\n)\n\nexport const getTweetIndex = state => {\n    const annotationID = getAnnotationID(state)\n    const eventID = getEventID(state)\n    const tweets = getTweets(state)\n    const tweetIndex = objectPath.get(state, ['ui', 'byAnnotation', annotationID, 'byEvent', eventID], {}).tweetIndex || 0\n    return {\n        hasPrevious: tweetIndex > 0,\n        hasNext: tweetIndex < tweets.length - 1,\n        total: tweets.length,\n        tweetIndex,\n    }\n}\n\nexport const getTweet = state => getTweets(state)[getTweetIndex(state).tweetIndex] || {}\n\nexport const getTopicID = state => getAnnotation(state).datasetTopicMapping[getEventID(state)]\nexport const getRunIDTitleItems = state => Object.entries(getAnnotation(state).runs).map(([i, {url, title}]) => [i, title])\nexport const getRun = state => getAnnotation(state).runs[getRunID(state)] || {'a': 1}\nexport const getRunTweetCategories = state => {\n    const annotation = getAnnotation(state)\n    const topic = annotation.datasetTopicMapping[getEventID(state)]\n\n    return ((getRun(state).payload || {})[topic] || {})[getTweet(state).postID]\n}\n","import React from 'react';\n\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport 'jquery';\nimport 'popper.js';\nimport 'bootstrap/dist/js/bootstrap.bundle.min';\nimport 'open-iconic/font/css/open-iconic-bootstrap.css';\nimport './App.css';\n\nimport { connect } from 'react-redux'\nimport objectPath from 'object-path'\n\nimport TweetEmbed from './tweet-embed'\n\nimport * as actions from './actions'\nimport * as selectors from './selectors'\n\nconst Select = ({title, onChange, value, values}) => (\n    <div className=\"input-group input-group-sm mr-2\">\n        <div className=\"input-group-prepend\">\n            <span className=\"input-group-text\">{title}</span>\n        </div>\n        <select className=\"custom-select custom-select-sm\"\n            onChange={e => onChange(e.target.value)} value={value}>\n            {values.map(([key, value]) => (<option value={key} key={key}>{value}</option>))}\n        </select>\n    </div>\n)\n\nlet TweetNavigation = ({annotationID, eventID, advanceTweet, tweetIndex}) => {\n    const onClick = by => () => advanceTweet(annotationID, eventID, by)\n\n    return <div className=\"btn-group\" role=\"group\">\n      <button type=\"button\" className={\"btn \" + (tweetIndex.hasPrevious ? \"btn-secondary \" : \"btn-outline-secondary \")} onClick={tweetIndex.hasPrevious ? onClick(-1) : () => null}><span className=\"oi oi-media-skip-backward\"></span></button>\n      <button type=\"button\" className=\"btn btn-secondary\">{tweetIndex.tweetIndex + 1} of {tweetIndex.total}</button>\n      <button type=\"button\" className={\"btn \" + (tweetIndex.hasNext ? \"btn-secondary \" : \"btn-outline-secondary \")} onClick={tweetIndex.hasNext ? onClick(1) : () => null}><span className=\"oi oi-media-skip-forward\"></span></button>\n    </div>\n}\nTweetNavigation = connect(\n    state => ({\n        annotationID: selectors.getAnnotationID(state),\n        eventID: selectors.getEventID(state),\n        tweetIndex: selectors.getTweetIndex(state),\n    }),\n    dispatch => ({\n        advanceTweet: (annotationID, eventID, by) => dispatch(actions.advanceTweet(annotationID, eventID, by))\n    })\n)(TweetNavigation)\n\nlet TweetSlider = ({tweetIndex, onChange, annotationID, eventID}) => (\n    <div className=\"mx-auto w-25\">\n        <input type=\"range\" className=\"custom-range\"\n            min=\"0\" max={`${tweetIndex.total - 1}`}\n            value={`${tweetIndex.tweetIndex}`}\n            onChange={e => onChange(annotationID, eventID, parseInt(e.target.value))}\n        />\n    </div>\n)\nTweetSlider = connect(\n    state => ({\n        tweetIndex: selectors.getTweetIndex(state),\n        annotationID: selectors.getAnnotationID(state),\n        eventID: selectors.getEventID(state),\n\n    }),\n    dispatch => ({\n        onChange: ((annotationID, eventID, index) => dispatch(actions.setTweet(annotationID, eventID, index)))\n    })\n)(TweetSlider)\n\nlet Navigation = ({eventsAnnotatedIdentifierNameItems, annotationsIDTitleItems, onChangeAnnotation, annotationID, eventID, onChangeEvent, runIDTitleItems, onChangeRun, runID}) => (\n    <nav className=\"navbar navbar-expand-md navbar-dark bg-dark mb-4\">\n        <span className=\"navbar-brand h1 mb-0\">IS</span>\n\n        <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#collapsableContent\">\n            <span className=\"navbar-toggler-icon\"></span>\n        </button>\n\n        <div>\n            <div className=\"collapse navbar-collapse\" id=\"collapsableContent\">\n                <form className=\"form-inline\">\n                    {false && <Select title=\"Annotation\" onChange={annotationID => onChangeAnnotation(annotationID)} value={annotationID} values={annotationsIDTitleItems} />}\n                    {eventsAnnotatedIdentifierNameItems && <Select title=\"Event\" onChange={eventID => onChangeEvent(annotationID, eventID)} value={eventID} values={eventsAnnotatedIdentifierNameItems} />}\n                    {eventsAnnotatedIdentifierNameItems && <Select title=\"Run\" onChange={runID => onChangeRun(annotationID, runID)} value={runID} values={[[null, ''], ...runIDTitleItems]} />}\n                </form>\n            </div>\n        </div>\n\n        <TweetSlider />\n        <TweetNavigation />\n\n    </nav>\n)\nNavigation = connect(\n    state => ({\n        eventsAnnotatedIdentifierNameItems: selectors.getEventsAnnotatedIdentifierNameItems(state),\n        annotationsIDTitleItems: selectors.getAnnotationsIDTitleItems(state),\n        annotationID: state.ui.annotationID,\n        eventID: selectors.getEventID(state),\n        runIDTitleItems: selectors.getRunIDTitleItems(state),\n        runID: selectors.getRunID(state),\n    }),\n    dispatch => ({\n        onChangeAnnotation: annotationID => dispatch(actions.annotationSelected(annotationID)),\n        onChangeEvent: (annotationID, eventID) => dispatch(actions.eventSelected(annotationID, eventID)),\n        onChangeRun: (annotationID, runURL) => dispatch(actions.runSelected(annotationID, runURL)),\n    })\n)(Navigation)\n\nlet CategoryGroup = ({categoryGroup, tweet, runTweetCategories}) => (\n    <div className=\"card mb-4\" style={{minWidth: \"200px\"}}>\n        <div className=\"card-header\">\n            <h5>{categoryGroup.title}</h5>\n        </div>\n\n        <ul className=\"list-group list-group-flush\">\n            {categoryGroup.categories.map((i) => {\n                let itemHighlight = tweet.categories && tweet.categories.has(i.id)\n                let badgeHighlight = null\n                if (runTweetCategories) {\n                    itemHighlight = runTweetCategories.has(i.id)\n                    badgeHighlight = tweet.categories && tweet.categories.has(i.id)\n                }\n\n                return <li\n                    className={'list-group-item ' + (itemHighlight ? 'text-white bg-secondary ' : '')}\n                    key={i.id}\n                >\n                    {i.title}\n                    {badgeHighlight !== null && !(!badgeHighlight  && !itemHighlight)  &&\n                        <span className={\"badge float-right mr-2 \" + (badgeHighlight === itemHighlight ? 'badge-success ' : 'badge-danger')}>\n                            {\n                                badgeHighlight === itemHighlight\n                                ? 'Correct'\n                                : (badgeHighlight? 'Missing' : 'Incorrect')}\n                        </span>\n                    }\n                </li>\n            })}\n        </ul>\n    </div>\n)\nCategoryGroup = connect(\n    state => ({\n        tweet: selectors.getTweet(state),\n        runTweetCategories: selectors.getRunTweetCategories(state),\n    })\n)(CategoryGroup)\n\nlet Categories = ({categoryGroups}) => (\n    <div className=\"container-fluid\">\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.request} />\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.callToAction} />\n            </div>\n\n        </div>\n        <div className=\"row\">\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.report} />\n            </div>\n\n            <div className=\"col\">\n                <CategoryGroup categoryGroup={categoryGroups.other} />\n            </div>\n        </div>\n    </div>\n)\nCategories = connect(\n    state => ({\n        categoryGroups: state.categoryGroups,\n    })\n)(Categories)\n\nlet EventDescription = ({eventInfo}) => (\n    <div>\n        <h5 className=\"mt-5\">Event description</h5>\n        <p dangerouslySetInnerHTML={{__html: objectPath.get(eventInfo, 'description')}} />\n    </div>\n)\nEventDescription = connect(\n    state => ({eventInfo: selectors.getEventInfo(state)})\n)(EventDescription)\n\nlet TweetBox = ({tweet}) => (\n    <div key={`tweet-${tweet.postID}`}>\n        {tweet && <TweetEmbed id={tweet.postID} />}\n    </div>\n)\nTweetBox = connect(\n    state => ({\n        tweet: selectors.getTweet(state),\n    })\n)(TweetBox)\n\nconst App = () => (\n    <div>\n        <Navigation />\n\n        <main className=\"container-fluid\" role=\"main\">\n            <div className=\"row mx-1\">\n                <div className=\"col jumbotron mx-auto\" style={{minWidth: \"300px\", maxWidth: \"500px\"}}>\n                    <TweetBox />\n                    <EventDescription />\n                </div>\n                <div className=\"col jumbotron ml-2\">\n                <Categories />\n                </div>\n            </div>\n        </main>\n    </div>\n)\n\nexport default App;\n","import * as actions from './actions'\n\nexport const ui = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_SELECTED: {\n        return {\n            ...state,\n            annotationID: action.annotationID,\n        }}\n    case actions.EVENT_SELECTED: {\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    eventID: action.eventID,\n                },\n            }\n        }\n    }\n    case actions.RUN_SELECTED: {\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    runID: action.runID,\n                },\n            }\n        }\n    }\n    case actions.ADVANCE_TWEET: {\n        const byEvent = {\n            ...(state.byAnnotation[action.annotationID].byEvent || {})\n        }\n        byEvent[action.eventID] = {\n            ...byEvent[action.eventID],\n            tweetIndex: ((byEvent[action.eventID] || {}).tweetIndex || 0) + action.by\n        }\n\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    byEvent,\n                },\n            }\n        }\n    }\n    case actions.SET_TWEET: {\n        const byEvent = {\n            ...(state.byAnnotation[action.annotationID].byEvent || {})\n        }\n        byEvent[action.eventID] = {\n            ...byEvent[action.eventID],\n            tweetIndex: action.index\n        }\n\n        return {\n            ...state,\n            byAnnotation: {\n                ...state.byAnnotation,\n                [action.annotationID]: {\n                    ...state.byAnnotation[action.annotationID],\n                    byEvent,\n                },\n            }\n        }\n    }\n    default: {\n        return state\n    }}\n}\n\nexport const annotations = (state = {}, action) => {\n    switch (action.type) {\n    case actions.ANNOTATION_RECEIVED: {\n        return {\n            ...state,\n            [action.annotationID]: {\n                ...(state[action.annotationID] || {}),\n                payload: action.payload,\n            }\n        }}\n    case actions.RUN_RECEIVED: {\n        return {\n            ...state,\n            [action.annotationID]: {\n                ...state[action.annotationID],\n                runs: {\n                    ...state[action.annotationID].runs,\n                    [action.runID]: {\n                        ...state[action.annotationID].runs[action.runID],\n                        payload: action.payload,\n                    }\n                }\n            }\n        }\n    }\n    default: {\n        return state\n    }}\n}\n\nexport const categoryGroups = (state = {}, action) => state\n","import { observer } from 'redux-observers'\n\nimport * as actions from './actions'\nimport * as selectors from './selectors'\n\nconst annotationObserver = observer(\n  state => state.ui.annotationID,\n  (dispatch, annotationID, previous) => {\n      dispatch(actions.fetchAnnotation(annotationID))\n  }\n)\n\nconst eventAnnotationObserver = observer(\n    state => ({\n        annotationID: selectors.getAnnotationID(state),\n        annotation: selectors.getAnnotation(state),\n        eventID: selectors.getEventID(state),\n    }),\n    (dispatch, {annotationID, annotation, eventID}, previous) => {\n        if (annotation.payload && !eventID) {\n            dispatch(actions.eventSelected(annotationID, annotation.payload.events[0].eventid))\n        }\n    }\n)\n\nconst runObserver = observer(\n    state => ({\n        annotationID: selectors.getAnnotationID(state),\n        runID: selectors.getRunID(state),\n        runURL: selectors.getRun(state).url,\n\n    }),\n    (dispatch, {annotationID, runID, runURL}, previous) => {\n        dispatch(actions.fetchRun(annotationID, runID, runURL))\n    }\n)\n\nexport default [annotationObserver, eventAnnotationObserver, runObserver]\n","import './index.css';\n\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport * as serviceWorker from './serviceWorker';\n\nimport { createStore, applyMiddleware, combineReducers } from \"redux\";\nimport { Provider } from \"react-redux\";\nimport logger from 'redux-logger';\nimport { observe } from 'redux-observers'\nimport thunk from 'redux-thunk'\n\nimport App from './App'\nimport * as reducers from './reducers'\nimport observers from './observers'\nimport * as actions from './actions'\n\nconst rootReducer = combineReducers(reducers)\n\nconst initialState = window._state\nconst store = createStore(rootReducer, initialState, applyMiddleware(thunk, logger))\nwindow.store = store\n\nobserve(store, observers)\n\nstore.dispatch(actions.fetchAnnotation(initialState.ui.annotationID))\n\nReactDOM.render(\n    <Provider store={store}>\n        <App />\n    </Provider>,\n    document.getElementById('root'))\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister()\n"],"sourceRoot":""}